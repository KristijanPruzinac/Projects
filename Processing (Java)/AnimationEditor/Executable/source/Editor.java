/* autogenerated by Processing revision 1292 on 2023-04-17 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import com.hamoid.*;
import java.util.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Editor extends PApplet {




float scalex;
float scaley;

//sprites
ArrayList<Sprite> sprites = new ArrayList<Sprite>();

ArrayList<Dropdown_menu> dropdown_menus = new ArrayList<Dropdown_menu>();

int image_file_num = 0;

int id_assign = 0;

//images
PImage recent_image; //open_image tab component
boolean fileOpened = false;

PImage check_mark;
PImage settings_icon;
PImage plus;
PImage minus;

PImage green_plus;
PImage red_minus;

PImage play;
PImage stop;

PImage snap_unpressed;
PImage snap_pressed;

PImage eye_closed;
PImage eye_opened;

PImage updates_on;
PImage updates_off;

PImage background_icon;
PImage rectangle;
PImage ellipse;
PImage no_icon;

PImage linear;
PImage ease_out;
PImage ease_in;
PImage integer;

PImage export;

PImage rename;

//keys
Boolean shift_clicked = false;
Boolean ctrl_pressed = false;
Boolean scrollbar_moving = false;
boolean playhead_moving = false;
boolean sprite_window_scrollbar_moving = false;

int sprite_window_scrollbar_moving_offset = 0;

//video object;
VideoExport videoExport;


//frame
int fps = 60;
int frame = 1;

//settings
Boolean video_quality_clicked = false;
Boolean framerate_clicked = false;

String cursor = "ARROW";

String[] floats;

boolean sprite_settings_typing = false;
int sprite_settings_index;

boolean sprite_settings_selected = false;
int sprite_settings_selected_index = 0;

//record
Boolean recording = false;

//position reference points
ArrayList<Point> reference_points;

//objects
Interface interface1 = new Interface();

//background
int[] background_color = {54, 57, 64};

//MousePressed
int mousePressedX = 0;
int mousePressedY = 0;
boolean mouse_pressed_wait = false;

//Snap pressed
boolean is_snap_pressed = true;

//Sprite dragging
boolean sprite_dragging = false;

//Sprite rotating
boolean sprite_rotating = false;

//Sprite mode 0 = show one, 1 = show all
boolean sprite_mode = false;

boolean instant_update = false;

//Don't update current positions next time (Instant update)
boolean update_penalty = false;

//Frame skip
float frame_decimal = 0;

Sprite copied_sprite;

public void setup() {
  /* size commented out by preprocessor */;
  
  frameRate(60);
  
  //init reference_points
  //reference_points = new ArrayList<Point>();
  
  //Setup
  //dropdown_menus.add(new Dropdown_menu("New sprite", 1580, 825, 200, 50, new String[]{"Image", "Rectangle", "Ellipse"}));
  dropdown_menus.add(new Dropdown_menu("New sprite", 1580, 825, 200, 50, new String[]{"Image"}));
  sprites.add(new Sprite("Background"));
  sprites.get(0).name = "Background";
  
  floats = new String[7];
  
  //load images
  check_mark = loadImage("Icons/Checkmark.png");
  settings_icon = loadImage("Icons/Configure.png");
  plus = loadImage("Icons/plus.png");
  minus = loadImage("Icons/minus.png");
  
  green_plus = loadImage("Icons/green_plus.png");
  red_minus = loadImage("Icons/red_minus.png");
  
  play = loadImage("Icons/Play.png");
  stop = loadImage("Icons/Stop.png");
  
  export = loadImage("Icons/Export.png");
  
  rename = loadImage("Icons/Rename.png");
  
  snap_unpressed = loadImage("Icons/Snap_unpressed.png");
  snap_pressed = loadImage("Icons/Snap_pressed.png");
  
  eye_closed = loadImage("Icons/eye_closed.png");
  eye_opened = loadImage("Icons/eye_opened.png");
  
  updates_on = loadImage("Icons/Updates_on.png");
  updates_off = loadImage("Icons/Updates_off.png");
  
  //Icons
  background_icon = loadImage("Icons/Background_icon.png");
  rectangle = loadImage("Icons/Rectangle.png");
  ellipse = loadImage("Icons/Ellipse.png");
  no_icon = loadImage("Icons/No_icon.png");
  
  linear = loadImage("Icons/linear.png");
  ease_out = loadImage("Icons/ease_out.png");
  ease_in = loadImage("Icons/ease_in.png");
  integer = loadImage("Icons/integer.png");
  
  //load video object;
  videoExport = new VideoExport(this, "Animation/animation.mp4");
  
  rectMode(CORNER);
  noStroke();
  imageMode(CENTER);
  
  textAlign(LEFT, CENTER);
  
  scalex = width / 1920;
  scaley = height / 1080;
  
  //scale(scalex, scaley);
}

public float roundT(float number, float decimal) {
    return (float) (round(number*pow(10, decimal))) / pow(10, decimal);
} 

public void mousePressed(){
  mousePressedX = mouseX;
  mousePressedY = mouseY;
  
  mouse_pressed_wait = true;
}

public void mousePressedEvent(){
  if (interface1.mode == "Animation_Editor"){
    //left mouse button
    if (mouseButton == LEFT){
      
      if (sprite_settings_typing == true){
        
        sprite_settings_typing = false;
        
        if (sprites.get(interface1.sprite_selected_index).type == "Image") {
          
          if (sprite_settings_index == 4){
            if (floats[sprite_settings_index] != ""){
              try {
                interface1.current_rotation = PApplet.parseFloat(floats[sprite_settings_index]);
              }
              catch (Exception e){
              
              }
              
              if (interface1.current_rotation > 360){
                interface1.current_rotation = 360;
              }
              else if (interface1.current_rotation < 0){
                interface1.current_rotation = 0;
              }
            }
          }
          else if (sprite_settings_index == 5){
            if (floats[sprite_settings_index] != ""){
              try {
                interface1.current_visibility = PApplet.parseFloat(floats[sprite_settings_index]);
              }
              catch (Exception e){
              
              }
              
              if (interface1.current_visibility > 1){
                interface1.current_visibility = 1;
              }
              else if (interface1.current_visibility < 0){
                interface1.current_visibility = 0;
              }
            }
          }
        }
        
        updateTextboxWidths();
      }
      
      //Update sprite window scrollbar
      
      if (isMouseOn(interface1.sprite_window_scrollbar_x + 1, interface1.sprite_window_scrollbar_y + interface1.sprite_window_offset_height, interface1.sprite_window_scrollbar_width - 2, interface1.sprite_window_scrollbar_length, "CORNER")){
        sprite_window_scrollbar_moving = true;
        
        sprite_window_scrollbar_moving_offset = (int) (mouseY - interface1.sprite_window_offset_height - interface1.sprite_window_scrollbar_length / 2f);
      }
      
      //reset rotation and visibility strings
      
      //if (sprites.get(interface1.sprite_selected_index).type == "Image"){
      //  floats = new String[7];
      //}
      
      if (sprites.get(interface1.sprite_selected_index).type == "Image"){
        if (sprite_settings_index == 4){
          floats[sprite_settings_index] = str(interface1.current_rotation);
        }
        else {
          floats[sprite_settings_index] = str(interface1.current_visibility);
        }
      }
      
      for (Dropdown_menu menu : dropdown_menus){
        menu.update(mouseX, mouseY);
      }
      
      if (interface1.sprite_selected == true && isMouseOn(interface1.sprite_settings_x, interface1.sprite_settings_y, interface1.sprite_settings_width, interface1.sprite_settings_height, "CORNER")){
        boolean mouseIsOn = false;
        
        if (sprites.get(interface1.sprite_selected_index).type == "Image"){
                
          for (int count = 0; count < interface1.textbox_offset.length; count++){
            if (isMouseOn((int) (interface1.sprite_settings_x + interface1.textbox_offset[count] - interface1.textbox_width_offset), (int) (interface1.sprite_settings_y + (count + 0.5f) * interface1.sprite_settings_element_height - interface1.sprite_settings_element_height / 4 + 3), interface1.textbox_width[count], (int) (interface1.sprite_settings_element_height / 2), "CORNER")){
              
              sprite_settings_typing = true;
              sprite_settings_index = count;
              
              mouseIsOn = true;
              
              break;
            }
          }
        }
        
        if (sprites.get(interface1.sprite_selected_index).type == "Background"){
          if (isMouseOn((int) (interface1.sprite_settings_x + interface1.textbox_offset[0] - interface1.textbox_width_offset), (int) (interface1.sprite_settings_y + (0.5f) * interface1.sprite_settings_element_height - interface1.sprite_settings_element_height / 4 + 3), (int) (interface1.textbox_width[0]), (int) (interface1.sprite_settings_element_height / 2), "CORNER")){
            mouseIsOn = true;
            sprite_settings_index = 0;
          }
          else if (isMouseOn((int) (interface1.sprite_settings_x + interface1.textbox_offset[0] - interface1.textbox_width_offset + interface1.textbox_width[0] + 10), (int) (interface1.sprite_settings_y + (0.5f) * interface1.sprite_settings_element_height - interface1.sprite_settings_element_height / 4 + 3), (int) (interface1.textbox_width[1]), (int) (interface1.sprite_settings_element_height / 2), "CORNER")){
            mouseIsOn = true;
            sprite_settings_index = 1;
          }
          else if (isMouseOn((int) (interface1.sprite_settings_x + interface1.textbox_offset[0] - interface1.textbox_width_offset + interface1.textbox_width[0] + interface1.textbox_width[1] + 20), (int) (interface1.sprite_settings_y + (0.5f) * interface1.sprite_settings_element_height - interface1.sprite_settings_element_height / 4 + 3), (int) (interface1.textbox_width[2]), (int) (interface1.sprite_settings_element_height / 2), "CORNER")){
            mouseIsOn = true;
            sprite_settings_index = 2;
          }
        }
        
        if (mouseIsOn == false){
          sprite_settings_typing = false;
          
          if (sprites.get(interface1.sprite_selected_index).type == "Background"){
            if (isMouseOn(interface1.sprite_settings_x, interface1.sprite_settings_y, interface1.sprite_settings_width, interface1.sprite_settings_element_height * 1, "CORNER")){
              if (isMouseOn((int) (interface1.sprite_settings_x + interface1.sprite_settings_width - 31.5f), (int) (interface1.sprite_settings_y + (0.26f) * interface1.sprite_settings_element_height), 25, 25, "CORNER")){
                interface1.current_interval_types[0] = switchInterval(interface1.current_interval_types[0]);
              }
              else {
                sprite_settings_selected = true;
                sprite_settings_selected_index = 0;
              }
            }
          }
          else if (sprites.get(interface1.sprite_selected_index).type == "Image"){
          
            if (isMouseOn(interface1.sprite_settings_x, interface1.sprite_settings_y, interface1.sprite_settings_width, interface1.sprite_settings_height, "CORNER")){
              boolean isTrue = false;
              
              for (int count = 0; count < interface1.textbox_offset.length; count++){
                if (isMouseOn((int) (interface1.sprite_settings_x + interface1.sprite_settings_width - 31.5f), (int) (interface1.sprite_settings_y + (0.26f + count) * interface1.sprite_settings_element_height), 25, 25, "CORNER")){
                  if (count != 6){
                    interface1.current_interval_types[count] = switchInterval(interface1.current_interval_types[count]);
                    isTrue = true;
                    break;
                  }
                }
              }
              
              if (isTrue == false) {
                if (isMouseOn(interface1.sprite_settings_x, interface1.sprite_settings_y, interface1.sprite_settings_width, interface1.sprite_settings_element_height * interface1.current_interval_types.length, "CORNER")){
                  sprite_settings_selected = true;
                  sprite_settings_selected_index = floor((float) (mouseY - interface1.sprite_settings_y) / interface1.sprite_settings_element_height);
                }
                else {
                  sprite_settings_selected = false;
                }
              }
            }
          }
        }
        else {
          sprite_settings_typing = true;
        }
        
        mouseIsOn = false;
      }
      else {
        
        if (isMouseOn(interface1.green_plus_x - 15, interface1.green_plus_y - 15, interface1.green_plus_width, interface1.green_plus_height, "CORNER")){
          
          boolean state_exists = false;
          int previous_state_index = 0;
          
          //for (int count = 0; count < sprites.get(interface1.sprite_selected_index).states.size(); count++){
          //  if (sprites.get(interface1.sprite_selected_index).states.get(count).frame == interface1.playhead_position){
          //    sprites.get(interface1.sprite_selected_index).states.remove(count);
          //    break;
          //  }
          //}
          
          for (int count = 0; count < sprites.get(interface1.sprite_selected_index).states.size(); count++){
            if (sprites.get(interface1.sprite_selected_index).states.get(count).frame == interface1.playhead_position){
              //sprites.get(interface1.sprite_selected_index).states.remove(count);
              state_exists = true;
              break;
            }
          }
          
          if (state_exists == false){
            
            for (State state : sprites.get(interface1.sprite_selected_index).states){
              if (state.frame > interface1.playhead_position){
                //previous_state_index--;
                
                break;
              }
              
              previous_state_index++;
            }
            
            previous_state_index--;
            
            if (sprites.get(interface1.sprite_selected_index).type == "Background"){
              
              State previous_state;
              
              try {
                previous_state = sprites.get(interface1.sprite_selected_index).states.get(previous_state_index);
              }
              catch (Exception e) {
                previous_state = new State(0, new String[]{"linear"}, new int[]{255, 255, 255}, 9);
              }
              
              sprites.get(interface1.sprite_selected_index).states.add(new State(interface1.playhead_position, previous_state.interval_types, previous_state.fill_color, previous_state.layer));
            }
            else if (sprites.get(interface1.sprite_selected_index).type == "Image"){
              
              State previous_state;
              
              try {
                previous_state = sprites.get(interface1.sprite_selected_index).states.get(previous_state_index);
              }
              catch (Exception e) {
                previous_state = new State(0, 0, 0, 0, 0, 0, new String[]{"linear", "linear", "linear", "linear", "linear", "linear", "integer"}, 1, 1);
              }
              
              sprites.get(interface1.sprite_selected_index).states.add(new State(interface1.playhead_position, -1, -1, -1, -1, -1, new String[]{"linear", "linear", "linear", "linear", "linear", "linear", "integer"}, -1, -1));
            }
          }
          
          Collections.sort(sprites.get(interface1.sprite_selected_index).states, new Comparator<State>() {
              @Override public int compare(State p1, State p2) {
                  return Integer.compare(p1.frame, p2.frame); // Ascending
              }
          });
          
          previous_state_index = 0;
          
          for (int i = 0; i < sprites.get(interface1.sprite_selected_index).states.size(); i++){
            if (sprites.get(interface1.sprite_selected_index).states.get(i).frame == interface1.playhead_position){
              previous_state_index = i;
              break;
            }
          }
          
          if (sprites.get(interface1.sprite_selected_index).type == "Background"){
            if (sprite_settings_selected_index == 0){
              sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).fill_color = interface1.current_fill_color;
              sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).interval_types = interface1.current_interval_types;
            }
          }
          else if (sprites.get(interface1.sprite_selected_index).type == "Image"){
            
            State previous_state;
            
            //try {
            //  previous_state = sprites.get(interface1.sprite_selected_index).states.get(previous_state_index);
            //}
            //catch (Exception e) {
            //  previous_state = new State(0, 0, 0, 0, 0, 0, interface1.current_interval_types, 1, 1);
            //}
            
            //Values
            if (sprite_settings_selected){
              switch (sprite_settings_selected_index){
                case 0:
                  sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).x = interface1.current_x;
                break;
                
                case 1:
                  sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).y = interface1.current_y;
                break;
                
                case 2:
                  sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).image_width = interface1.current_width;
                break;
                
                case 3:
                  sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).image_height = interface1.current_height;
                break;
                
                case 4:
                  sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).rotation = interface1.current_rotation;
                break;
                
                case 5:
                  sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).visibility = interface1.current_visibility;
                break;
                
                case 6:
                  sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).layer = interface1.current_layer;
                break;
              }
            }
            else {
              sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).x = interface1.current_x;
              sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).y = interface1.current_y;
              sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).image_width = interface1.current_width;
              sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).image_height = interface1.current_height;
              sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).rotation = interface1.current_rotation;
              sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).visibility = interface1.current_visibility;
              sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).layer = interface1.current_layer;
              
            }
            
            sprites.get(interface1.sprite_selected_index).states.get(previous_state_index).interval_types[sprite_settings_selected_index] = interface1.current_interval_types[sprite_settings_selected_index];
          }
          
          for (Sprite sprite : sprites){
            sprite.update();
          }
        }
        else if (isMouseOn(interface1.red_minus_x - 15, interface1.red_minus_y - 15, interface1.red_minus_width, interface1.red_minus_height, "CORNER")){
          
          if (sprites.get(interface1.sprite_selected_index).type == "Image"){
            boolean stateExists = false;
            int index = 0;
            
            for (int count = 0; count < sprites.get(interface1.sprite_selected_index).states.size(); count++){
              if (sprites.get(interface1.sprite_selected_index).states.get(count).frame == interface1.playhead_position){
                stateExists = true;
                index = count;
                break;
              }
            }
            
            if (stateExists){
              if (sprite_settings_selected){
                switch (sprite_settings_selected_index){
                  case 0:
                    sprites.get(interface1.sprite_selected_index).states.get(index).x = -1;
                  break;
                  
                  case 1:
                    sprites.get(interface1.sprite_selected_index).states.get(index).y = -1;
                  break;
                  
                  case 2:
                    sprites.get(interface1.sprite_selected_index).states.get(index).image_width = -1;
                  break;
                  
                  case 3:
                    sprites.get(interface1.sprite_selected_index).states.get(index).image_height = -1;
                  break;
                  
                  case 4:
                    sprites.get(interface1.sprite_selected_index).states.get(index).rotation = -1;
                  break;
                  
                  case 5:
                    sprites.get(interface1.sprite_selected_index).states.get(index).visibility = -1;
                  break;
                  
                  case 6:
                    sprites.get(interface1.sprite_selected_index).states.get(index).layer = -1;
                  break;
                }
                
                if (sprites.get(interface1.sprite_selected_index).states.get(index).x == -1 &&
                    sprites.get(interface1.sprite_selected_index).states.get(index).y == -1 &&
                    sprites.get(interface1.sprite_selected_index).states.get(index).image_width == -1 &&
                    sprites.get(interface1.sprite_selected_index).states.get(index).image_height == -1 &&
                    sprites.get(interface1.sprite_selected_index).states.get(index).rotation == -1 &&
                    sprites.get(interface1.sprite_selected_index).states.get(index).visibility == -1 &&
                    sprites.get(interface1.sprite_selected_index).states.get(index).layer == -1)
                {
                  sprites.get(interface1.sprite_selected_index).states.remove(index);
                }
              }
              else {
                sprites.get(interface1.sprite_selected_index).states.remove(index);
              }
            }
          }
          else if (sprites.get(interface1.sprite_selected_index).type == "Background"){
            boolean stateExists = false;
            int index = 0;
            
            for (int count = 0; count < sprites.get(interface1.sprite_selected_index).states.size(); count++){
              if (sprites.get(interface1.sprite_selected_index).states.get(count).frame == interface1.playhead_position){
                stateExists = true;
                index = count;
                break;
              }
            }
            
            if (stateExists){
              sprites.get(interface1.sprite_selected_index).states.remove(index);
            }
          }
          
          updateCurrentState();
          updateTextboxWidths();
          
          for (Sprite sprite : sprites){
            sprite.update();
          }
        }
        else {
          
          sprite_settings_selected = false;
          
          if (cursor != "ARROW"){
            cursor(ARROW);
            cursor = "ARROW";
          }
        }
      }
      
      if (isMouseOn(interface1.sprite_window_x, interface1.sprite_window_y, interface1.sprite_window_width, interface1.sprite_element_height * sprites.size(), "CORNER")){
        interface1.sprite_selected_index = floor((float) (mouseY - interface1.sprite_window_y + interface1.sprite_window_offset % interface1.sprite_element_height) / (float) interface1.sprite_element_height) + floor(interface1.sprite_window_offset / interface1.sprite_element_height);
        interface1.sprite_selected = true;
        
        updateCurrentState();
        updateTextboxWidths();
      }
      else if (isMouseOn(interface1.timeline_x, interface1.timeline_y, interface1.timeline_width, interface1.timeline_height, "CORNER") || isMouseOn(interface1.scroll_bar_x, interface1.scroll_bar_y, interface1.scroll_bar_width, interface1.scroll_bar_height, "CORNER") || isMouseOn(interface1.sprite_settings_x, interface1.sprite_settings_y, interface1.sprite_settings_width, interface1.sprite_settings_height, "CORNER")){
        
      }
      else if (isMouseOn(interface1.green_plus_x - 15, interface1.green_plus_y - 15, interface1.green_plus_width, interface1.green_plus_height, "CORNER") || isMouseOn(interface1.red_minus_x - 15, interface1.red_minus_y - 15, interface1.red_minus_width, interface1.red_minus_height, "CORNER")){
        
      }
      //Mouse on play / stop buttons
      else if (isMouseOn(interface1.play_button_x - (int) (interface1.play_stop_buttons_width / 2), interface1.play_button_y - (int) (interface1.play_stop_buttons_width / 2), interface1.play_stop_buttons_width, interface1.play_stop_buttons_width, "CORNER")){
        interface1.playing = true;
      }
      else if (isMouseOn(interface1.stop_button_x - (int) (interface1.play_stop_buttons_width / 2), interface1.stop_button_y - (int) (interface1.play_stop_buttons_width / 2), interface1.play_stop_buttons_width, interface1.play_stop_buttons_width, "CORNER")){
        interface1.playing = false;
      }
      else if (isMouseOn(interface1.snap_button_x - 15, interface1.snap_button_y - 15, 30, 30, "CORNER")){
        if (is_snap_pressed == false){
          is_snap_pressed = true;
        }
        else {
          is_snap_pressed = false;
        }
      }
      else if (sprites.get(interface1.sprite_selected_index).states.size() > 1 && isMouseOn((int) (interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) interface1.latest_x / 1920f)) - 10, (int) (interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) interface1.latest_y / 1080f)) - 10, interface1.timeline_state_width + 20, interface1.timeline_state_width + 20, "CORNER")) {
        sprite_dragging = true;
      }
      else if (sprites.get(interface1.sprite_selected_index).states.size() > 1 && isMouseOn((int) (interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) interface1.latest_x / 1920f) + sin(radians(interface1.latest_rotation)) * interface1.rotation_slider_distance) - 10, (int) (interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) interface1.latest_y / 1080f) + -cos(radians(interface1.latest_rotation)) * interface1.rotation_slider_distance) - 10, 20, 20, "CORNER")){
        sprite_rotating = true;
      }
      else if (sprites.get(interface1.sprite_selected_index).states.size() <= 1 && isMouseOn((int) (interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) interface1.current_x / 1920f)) - 10, (int) (interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) interface1.current_y / 1080f)) - 10, interface1.timeline_state_width + 20, interface1.timeline_state_width + 20, "CORNER")){
        sprite_dragging = true;
      }
      else if (sprites.get(interface1.sprite_selected_index).states.size() <= 1 && isMouseOn((int) (interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) interface1.current_x / 1920f) + sin(radians(interface1.latest_rotation)) * interface1.rotation_slider_distance) - 10, (int) (interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) interface1.current_y / 1080f) + -cos(radians(interface1.latest_rotation)) * interface1.rotation_slider_distance) - 10, 20, 20, "CORNER")){
        sprite_rotating = true;
      }
      else if (isMouseOn(interface1.animation_window_x - 10, interface1.animation_window_y - 10, interface1.animation_window_width + 20, interface1.animation_window_height + 20, "CORNER")){
        
      }
      else if (isMouseOn(interface1.sprite_mode_x - 16, interface1.sprite_mode_y - 10, 32, 20, "CORNER")){
        if (sprite_mode){
          sprite_mode = false;
        }
        else {
          sprite_mode = true;
        }
      }
      else if (isMouseOn(interface1.instant_updates_x - 25, interface1.instant_updates_y - 25, 50, 50, "CORNER")){
        if (instant_update){
          instant_update = false;
        }
        else {
          instant_update = true;
        }
      }
      else {
        interface1.sprite_selected = false;
      }
      
      if (isMouseOn(interface1.export_button_x - 25, interface1.export_button_y - 25, 50, 50, "CORNER")){
        interface1.mode = "Export";
        interface1.playhead_position = 0;
        exportVideo();
      }
      
      //open new file
      //if (isMouseOn(interface1.rect_x, interface1.rect_y, interface1.rect_width, interface1.rect_height, "CORNER")){
      //  open_file();
      //}
      if (isMouseOn(interface1.settings_x - 26, interface1.settings_y - 26, 52, 52, "CORNER")){
        interface1.mode = "Options";
      }
      else if (isMouseOn(interface1.scroll_bar_x, interface1.scroll_bar_y, interface1.scroll_bar_width, interface1.scroll_bar_height, "CORNER")){
        scrollbar_moving = true;
      }
      else if (isMouseOn(interface1.timeline_x, interface1.timeline_y, interface1.timeline_width, interface1.timeline_height, "CORNER")){
        interface1.playhead_position = round(interface1.scroll + PApplet.parseFloat(mouseX - interface1.scroll_bar_x) / interface1.timeline_width * interface1.zoom_levels[interface1.zoom] * 15);
        playhead_moving = true;
        
       if (interface1.playhead_position < 0){
          interface1.playhead_position = 0;
        }
        else if (interface1.playhead_position > interface1.videoLength){
          interface1.playhead_position = interface1.videoLength;
        }
        
        updateCurrentState();
        updateTextboxWidths();
      }
    }
    
    //right mouse button
    else if (mouseButton == RIGHT){
      //clicked on sprite
    }
  }
  else if (interface1.mode == "Name_Sprite"){
    if (mouseButton == LEFT){
      //textBox
      if (isMouseOn(interface1.tBox_x, interface1.tBox_y, interface1.tBox_width, interface1.tBox_height, "CORNER")){
        interface1.textBox_clicked = true;
      }
      else {
        interface1.textBox_clicked = false;
        //checkmark
        if (isMouseOn(interface1.tBox_x + interface1.tBox_width + 50, interface1.tBox_y, 50, 50, "CORNER")){
          if (interface1.currentName != ""){
            sprites.get(sprites.size() - 1).name = interface1.currentName;
            interface1.mode = "Animation_Editor";
          }
        }
      }
    }
  }
  else if (interface1.mode == "Options"){
    if (mouseButton == LEFT){
      if (isMouseOn(interface1.settings_x - 26, interface1.settings_y - 26, 52, 52, "CORNER")){
        interface1.mode = "Animation_Editor";
      }
      else if (isMouseOn(interface1.vqs_x, interface1.vqs_y, interface1.vqs_width, interface1.vqs_height, "CORNER")){
        video_quality_clicked = true;
      }
      else if (isMouseOn(interface1.frs_x, interface1.frs_y, interface1.frs_width, interface1.frs_height, "CORNER")){
        framerate_clicked = true;
      }
    }
  }
}

public void mouseReleased(){
  
  if (interface1.mode == "Options"){
    if (mouseButton == LEFT){
      if (video_quality_clicked == true){
        video_quality_clicked = false;
      }
      else if (framerate_clicked == true){
        framerate_clicked = false;
      }
    }
  }
  else if (interface1.mode == "Animation_Editor"){
    scrollbar_moving = false;
    playhead_moving = false;
    sprite_window_scrollbar_moving = false;
    sprite_dragging = false;
    sprite_rotating = false;
  }
}

public void keyPressed(){
  //if (key == 'q'){
  //  videoExport.endMovie();
  //  exit();
  //}
  if (interface1.mode == "Name_Sprite"){
    //textBox pressed
    if (interface1.textBox_clicked == true){
      if (keyCode == BACKSPACE){
        //name length
        if (interface1.name_length > 0){
          interface1.currentName = interface1.currentName.substring(0, interface1.name_length - 1);
          interface1.name_length--;
        }
      }
      //name length
      else if (interface1.name_length < 14){
        if (keyCode != ENTER && keyCode != RETURN){
          interface1.currentName = interface1.currentName + PApplet.parseChar(key);
          interface1.name_length++;
        }
      }
    }
  }
  else if (interface1.mode == "Animation_Editor"){
    if (keyCode == CONTROL){
      ctrl_pressed = true;
    }
    else if (keyCode == SHIFT){
      shift_clicked = true;
    }
    else if (key == 'r'){
      updateCurrentState();
      updateTextboxWidths();
    }
    else if (key == 't'){
      if (is_snap_pressed == false){
        is_snap_pressed = true;
      }
      else {
        is_snap_pressed = false;
      }
    }
    else if (key == 'f'){
      if (sprite_mode){
        sprite_mode = false;
      }
      else {
        sprite_mode = true;
      }
    }
    else if (key == 'g'){
      if (instant_update){
        instant_update = false;
      }
      else {
        instant_update = true;
      }
    }
    else if (key == 'c'){
      println("oop");
      if (interface1.sprite_selected){
        copied_sprite = sprites.get(interface1.sprite_selected_index);
      }
    }
    else if (key == 'v'){
      if (copied_sprite != null){
        sprites.add(copied_sprite);
      }
    }
    else if (keyCode == DOWN){
      if (sprite_settings_selected){
        if (sprite_settings_selected_index < interface1.current_interval_types.length - 1){
          sprite_settings_selected_index++;
        }
      }
      else if (interface1.sprite_selected){
        if (interface1.sprite_selected_index < sprites.size() - 1){
          interface1.sprite_selected_index++;
        }
      }
    }
    else if (keyCode == UP){
      if (sprite_settings_selected){
        if (sprite_settings_selected_index > 0){
          sprite_settings_selected_index--;
        }
      }
      else if (interface1.sprite_selected){
        if (interface1.sprite_selected_index > 0){
          interface1.sprite_selected_index--;
        }
      }
    }
    else if (keyCode == RIGHT){
      if (shift_clicked == true){
        //if (interface1.scroll + 10 <= interface1.videoLength - (interface1.zoom_levels[interface1.zoom] * 15)){
        //  interface1.scroll += 10;
        //}
        if (interface1.playhead_position + 10 <= interface1.videoLength - 1){
          interface1.playhead_position += 10;
        }
        else {
          //interface1.scroll = interface1.videoLength - (interface1.zoom_levels[interface1.zoom] * 15);
          interface1.playhead_position = interface1.videoLength - 1;
        }
      }
      else {
        //if (interface1.scroll + 1 <= interface1.videoLength - (interface1.zoom_levels[interface1.zoom] * 15)){
        //  interface1.scroll++;
        //}
        if (interface1.playhead_position + 1 <= interface1.videoLength - 1){
          interface1.playhead_position++;
        }
      }
      
      if (interface1.playhead_position - interface1.scroll - interface1.zoom_levels[interface1.zoom] * 15 > 0){
        interface1.scroll = interface1.playhead_position - interface1.zoom_levels[interface1.zoom] * 15;
      }
      
      updateCurrentState();
      updateTextboxWidths();
    }
    else if (keyCode == LEFT){
      if (shift_clicked == true){
        //if (interface1.scroll - 10 >= 0){
        //  interface1.scroll -= 10;
        //}
        if (interface1.playhead_position - 10 >= 0){
          interface1.playhead_position -= 10;
        }
        else {
          //interface1.scroll = 0;
          interface1.playhead_position = 0;
        }
      }
      else {
        //if (interface1.scroll - 1 >= 0){
        //  interface1.scroll--;
        //}
        if (interface1.playhead_position - 1 >= 0){
          interface1.playhead_position--;
        }
      }
      
      if (interface1.playhead_position - interface1.scroll < 0){
        interface1.scroll = interface1.playhead_position;
      }
      
      updateCurrentState();
      updateTextboxWidths();
    }
    else if ((sprite_settings_typing == true && keyCode - 48 >= 0 && keyCode - 48 <= 9) || key == '.'){
      if (sprites.get(interface1.sprite_selected_index).type == "Image"){
        if (key == '.'){
          if (sprite_settings_index == 4){
            floats[sprite_settings_index] += ".";
          }
          else if (sprite_settings_index == 5){
            floats[sprite_settings_index] += ".";
          }
        }
        else {
          switch (sprite_settings_index){
            case 0:
              if (str(interface1.current_x).length() < 4){
                interface1.current_x = PApplet.parseInt(str(interface1.current_x) + str(key));
              }
            break;
            
            case 1:
              if (str(interface1.current_y).length() < 4){
                interface1.current_y = PApplet.parseInt(str(interface1.current_y) + str(key));
              }
            break;
            
            case 2:
              if (str(interface1.current_width).length() < 4){
                interface1.current_width = PApplet.parseInt(str(interface1.current_width) + str(key));
              }
            break;
            
            case 3:
              if (str(interface1.current_height).length() < 4){
                interface1.current_height = PApplet.parseInt(str(interface1.current_height) + str(key));
              }
            break;
            
            case 4:
              if (floats[sprite_settings_index].length() < 5){
                floats[sprite_settings_index] += str(key);
              }
            break;
            
            case 5:
              if (floats[sprite_settings_index].length() < 5){
                floats[sprite_settings_index] += str(key);
              }
            break;
            
            case 6:
              if (interface1.current_layer == 0){
                interface1.current_layer = PApplet.parseInt(str(interface1.current_layer) + str(key));
              }
            break;
          }
        }
      }
      else if (sprites.get(interface1.sprite_selected_index).type == "Background"){
        switch (sprite_settings_index){
          case 0:
              if (str(interface1.current_fill_color[0]).length() < 3){
                interface1.current_fill_color[0] = PApplet.parseInt(str(interface1.current_fill_color[0]) + str(key));
              }
            break;
            
            case 1:
              if (str(interface1.current_fill_color[1]).length() < 3){
                interface1.current_fill_color[1] = PApplet.parseInt(str(interface1.current_fill_color[1]) + str(key));
              }
            break;
            
            case 2:
              if (str(interface1.current_fill_color[2]).length() < 3){
                interface1.current_fill_color[2] = PApplet.parseInt(str(interface1.current_fill_color[2]) + str(key));
              }
            break;
        }
      }
      
      updateTextboxWidths();
    }
    else if (sprite_settings_typing == true && keyCode == BACKSPACE){
      
      if (sprites.get(interface1.sprite_selected_index).type == "Image"){
        
        switch (sprite_settings_index){
          case 0:
            if (str(interface1.current_x).length() > 0){
              interface1.current_x = PApplet.parseInt(str(interface1.current_x).substring(0, str(interface1.current_x).length() - 1));
            }
          break;
          
          case 1:
            if (str(interface1.current_y).length() > 0){
              interface1.current_y = PApplet.parseInt(str(interface1.current_y).substring(0, str(interface1.current_y).length() - 1));
            }
          break;
          
          case 2:
            if (str(interface1.current_width).length() > 0){
              interface1.current_width = PApplet.parseInt(str(interface1.current_width).substring(0, str(interface1.current_width).length() - 1));
            }
          break;
          
          case 3:
            if (str(interface1.current_height).length() > 0){
              interface1.current_height = PApplet.parseInt(str(interface1.current_height).substring(0, str(interface1.current_height).length() - 1));
            }
          break;
          
          case 4:
            if (floats[sprite_settings_index].length() > 1){
              floats[sprite_settings_index] = floats[sprite_settings_index].substring(0, floats[sprite_settings_index].length() - 1);
            }
            else {
              floats[sprite_settings_index] = "";
            }
          break;
          
          case 5:
            if (floats[sprite_settings_index].length() > 1){
              floats[sprite_settings_index] = floats[sprite_settings_index].substring(0, floats[sprite_settings_index].length() - 1);
            }
            else {
              floats[sprite_settings_index] = "";
            }
          break;
          
          case 6:
            if (str(interface1.current_layer).length() > 0){
              interface1.current_layer = PApplet.parseInt(str(interface1.current_layer).substring(0, str(interface1.current_layer).length() - 1));
            }
          break;
        }
      }
      else if (sprites.get(interface1.sprite_selected_index).type == "Background"){
        switch (sprite_settings_index){
          case 0:
            if (str(interface1.current_fill_color[0]).length() > 0){
              interface1.current_fill_color[0] = PApplet.parseInt(str(interface1.current_fill_color[0]).substring(0, str(interface1.current_fill_color[0]).length() - 1));
            }
          break;
          
          case 1:
            if (str(interface1.current_fill_color[1]).length() > 0){
              interface1.current_fill_color[1] = PApplet.parseInt(str(interface1.current_fill_color[1]).substring(0, str(interface1.current_fill_color[1]).length() - 1));
            }
          break;
          
          case 2:
            if (str(interface1.current_fill_color[2]).length() > 0){
              interface1.current_fill_color[2] = PApplet.parseInt(str(interface1.current_fill_color[2]).substring(0, str(interface1.current_fill_color[2]).length() - 1));
            }
          break;
        }
      }
      
      updateTextboxWidths();
    }
    //Spacebar
    else if (keyCode == 32){
      if (interface1.playing){
        interface1.playing = false;
      }
      else {
        interface1.playing = true;
      }
    }
  }
}

public void keyReleased(){
  if (interface1.mode == "Animation_Editor"){
    if (keyCode == CONTROL){
      ctrl_pressed = false;
    }
    else if (keyCode == SHIFT){
      shift_clicked = false;
    }
  }
}

public void mouseWheel(MouseEvent event) {
  float e = event.getCount();
  if (ctrl_pressed == true){
    if (interface1.zoom_available == true) {
      if (e < 0){
        if (interface1.zoom > 0){
          interface1.zoom -= 1;
          
          if ((PApplet.parseFloat(mouseX - interface1.scroll_bar_x) / interface1.timeline_width) * interface1.zoom_levels[interface1.zoom] * 15 < 0){
            interface1.scroll += 0;
          }
          else if ((PApplet.parseFloat(mouseX - interface1.scroll_bar_x) / interface1.timeline_width) * interface1.zoom_levels[interface1.zoom] * 15 > interface1.zoom_levels[interface1.zoom] * 15){
            interface1.scroll += interface1.zoom_levels[interface1.zoom] * 15;
          }
          else {
            interface1.scroll += PApplet.parseInt((PApplet.parseFloat(mouseX - interface1.scroll_bar_x) / interface1.timeline_width) * interface1.zoom_levels[interface1.zoom] * 15);
          }
        
        }
      }
      else if (e > 0){
        if (interface1.zoom < interface1.zoom_levels.length - 1){
          if (interface1.zoom_levels[interface1.zoom + 1] * 15 <= interface1.videoLength){
            interface1.zoom += 1;
            
            if ((PApplet.parseFloat(mouseX - interface1.scroll_bar_x) / interface1.timeline_width) * interface1.zoom_levels[interface1.zoom] * 15 < 0){
              interface1.scroll -= 0;
            }
            else if ((PApplet.parseFloat(mouseX - interface1.scroll_bar_x) / interface1.timeline_width) * interface1.zoom_levels[interface1.zoom] * 15 > interface1.zoom_levels[interface1.zoom] * 15){
              interface1.scroll += interface1.zoom_levels[interface1.zoom] * 15;
            }
            else {
              interface1.scroll -= PApplet.parseInt((PApplet.parseFloat(mouseX - interface1.scroll_bar_x) / interface1.timeline_width) * interface1.zoom_levels[interface1.zoom] * 15);
            }
            
            //Change timeline scroll
            if (interface1.scroll > interface1.videoLength - (interface1.zoom_levels[interface1.zoom] * 15)){
              interface1.scroll = interface1.videoLength - (interface1.zoom_levels[interface1.zoom] * 15);
            }
            else if (interface1.scroll < 0){
              interface1.scroll = 0;
            }
          }
        }
      }
    }
  }
}

public void draw(){
  
  if (mouse_pressed_wait){
    mousePressedEvent();
    
    mouse_pressed_wait = false;
  }
  
  //background
  if (interface1.mode == "Animation_Editor"){
    //Draw frame in animation window
    for (int layer = 9; layer > 0; layer--){
      
      if (sprite_mode){
        //Show preview of all sprites
        for (int i = 0; i < sprites.size(); i++){
          sprites.get(i).showPreview(layer, i);
        }
      }
      else {
        //Show preview of only this sprite
        sprites.get(0).showPreview(layer, interface1.sprite_selected_index);
        
        if (interface1.sprite_selected_index > 0){
          sprites.get(interface1.sprite_selected_index).showPreview(layer, interface1.sprite_selected_index);
        }
      }
    }
    
    //Fill in background except for animation window
    noStroke();
    fill(background_color[0], background_color[1], background_color[2]);
    rect(0, 0, width, interface1.animation_window_y);
    rect(0, interface1.animation_window_y, interface1.animation_window_x, height - interface1.animation_window_y);
    rect(interface1.animation_window_x + interface1.animation_window_width, interface1.animation_window_y, interface1.animation_window_x, height - interface1.animation_window_y);
    rect(interface1.animation_window_x, interface1.animation_window_y + interface1.animation_window_height, interface1.animation_window_width, height - interface1.animation_window_y - interface1.animation_window_height);
  }
  else if (interface1.mode == "Export"){
    for (int layer = 9; layer > 0; layer--){
      for (int i = 0; i < sprites.size(); i++){
        sprites.get(i).show(layer, i);
      }
    }
    
    videoExport.saveFrame();
    
    stroke(0);
    strokeWeight(2);
    fill(255);
    rect(760, 1000, 400, 20);
    fill(0, 200, 0);
    noStroke();
    rect(761, 1001, ((float) interface1.playhead_position / (float) interface1.last_frame) * 400f, 19);
    
    frame_decimal += 60f / (float) interface1.framerate;
    
    interface1.playhead_position = round(frame_decimal);
    
    if (interface1.playhead_position > interface1.last_frame){
      videoExport.endMovie();
      interface1.mode = "Animation_Editor";
      interface1.playhead_position = 0;
      updateCurrentState();
      updateTextboxWidths();
      
      shift_clicked = false;
      ctrl_pressed = false;
      scrollbar_moving = false;
      playhead_moving = false;
      sprite_dragging = false;
      mouse_pressed_wait = false;
      
      frame_decimal = 0;
    }
  }
  else {
    background(background_color[0], background_color[1], background_color[2]);
  }
  
  //Update file opening
  if (fileOpened == true){
    sprites.add(new Sprite("Image", recent_image));
    
    image_file_num++;
    interface1.mode = "Name_Sprite";
    interface1.currentName = "";
    interface1.name_length = 0;
    
    fileOpened = false;
  }
  
  //Show interface
  interface1.show();
  
  //try {
  //  println(sprites.get(1).states.get(1).frame);
  //}
  //catch (Exception e){
    
  //}
  
  //videoExport.saveFrame();
}
// Class for making animations
class Animation {
  ArrayList<Float> values = new ArrayList<Float>();
  ArrayList<Float> updates = new ArrayList<Float>();
  
  ArrayList<String> names = new ArrayList<String>();
  ArrayList<String> types = new ArrayList<String>();
  ArrayList<Integer> states = new ArrayList<Integer>();
  
  public void update(){
    for (int count = 0; count < names.size(); count++){
      values.set(count, values.get(count) + updates.get(count));
      
      //Never go over 1
      if (values.get(count) > 1){
        values.set(count, 1f);
      }
    }
  }
  
  public void addAnimation(String animation_name, String type, float time, int state){
    if (type == "Integer"){
      names.add(animation_name);
      values.add(1f);
      updates.add(0f);
      types.add(type);
      states.add(state);
    }
    else {
      names.add(animation_name);
      values.add(0f);
      updates.add(1 / (((float) time / 1000) * frameRate));
      types.add(type);
      states.add(state);
    }
  }
  
  public void reset(){
    values.clear();
    updates.clear();
    names.clear();
    types.clear();
    states.clear();
  }
  
  public void removeAnimation(String name){
    int temp_index = names.indexOf(name);
    
    values.remove(temp_index);
    updates.remove(temp_index);
    names.remove(temp_index);
    types.remove(temp_index);
    states.remove(temp_index);
  }
  
  public boolean isFinished(String name){
    int temp_index = names.indexOf(name);
    
    if (values.get(temp_index) >= 1){
      return true;
    }
    else {
      return false;
    }
  }
  
  public void changeState(String animation_name, String type, float time, int state){
    int temp_index = names.indexOf(animation_name);
    
    values.set(temp_index, 0f);
    updates.set(temp_index, 1 / (((float) time / 1000) * frameRate));
    types.set(temp_index, type);
    states.set(temp_index, state);
  }
  
  public int getState(String name){
    int temp_index = names.indexOf(name);
    
    return states.get(temp_index);
  }
  
  public float getValue(String name){
    int temp_index = names.indexOf(name);
    
    float return_value = 0;
    
    switch(types.get(temp_index)){
      case "linear":
        return_value = values.get(temp_index);
      break;
      
      case "ease_in":
        return_value = 1 - cos((values.get(temp_index) / 2) * PI);
      break;
      
      case "ease_out":
        return_value = sin((values.get(temp_index) / 2) * PI);
      break;
      
      case "integer":
        return_value = 1;
      break;
      
      default:
        println("ERROR: Wrong animation type!");
      break;
    }
    
    return return_value;
  }
}
class Dropdown_menu {
  int x;
  int y;

  int dwidth;
  int dheight;
  
  String text;

  String[] options;
  
  int selected_element;
  
  int hovered_element;
  
  boolean mouse_hovered = false;

  boolean pressed = false;

  //Options
  boolean fill_on = true;
  boolean stroke_on = true;

  int[] Fill_color = {200, 200, 200};
  int[] Stroke_color = {255, 255, 255};
  int[] Hovered_color = {150, 150, 255};

  Dropdown_menu (String text, int x, int y, int dwidth, int dheight, String[] options) {
    this.text = text;
    this.x = x;
    this.y = y;
    this.dwidth = dwidth;
    this.dheight = dheight;
    this.options = options;
  }

  public void update(int mousex, int mousey) {
    if (isMouseOn(x, y, dwidth, dheight, "CORNER")) {
      if (pressed == false) {
        pressed = true;
      } else {
        pressed = false;
      }
    }
    else if (isMouseOn(x, y + dheight, dwidth, dheight * (options.length), "CORNER") && pressed == true){
      selected_element = PApplet.parseInt(floor(((float) mousey - ((float) y + (float) dheight)) / (float) dheight));
      
      if (options[selected_element] == "Image"){
        open_file();
      }
      else {
        sprites.add(new Sprite(options[selected_element], null));
        interface1.mode = "Name_Sprite";
        interface1.currentName = "";
        interface1.name_length = 0;
      }
      
      pressed = false;
    }
  }
  
  public void update_no_click(int mousex, int mousey) {
    if (mousex > x && mousex < x + dwidth && mousey > y + dheight && mousey < y + dheight * (1 + options.length)){
      mouse_hovered = true;
      
      hovered_element = PApplet.parseInt(floor(((float) mousey - ((float) y + (float) dheight)) / (float) dheight));
    }
    else {
      mouse_hovered = false;
    }
  }

  public void show() {
    
    if (fill_on == true) {
      fill(Fill_color[0], Fill_color[1], Fill_color[2]);
    } else {
      noFill();
    }

    if (stroke_on == true) {
      stroke(Stroke_color[0], Stroke_color[1], Stroke_color[2]);
      strokeWeight(1);
    } else {
      noStroke();
    }

    if (pressed == false) {
      rectMode(CORNER);
      rect(x, y, dwidth, dheight);
      
      textAlign(CENTER, CENTER);
      textSize(PApplet.parseInt(dheight * 0.5f));
      
      fill(255);
      stroke(255);
      strokeWeight(1);
      
      text(text, x, y, dwidth, dheight);
      
    } else {
      rectMode(CORNER);
      rect(x, y, dwidth, dheight);
      rect(x, y + dheight, dwidth, dheight * options.length);
      
      if (mouse_hovered == true){
        noStroke();
        fill(Hovered_color[0], Hovered_color[1], Hovered_color[2]);
        rect(x + 1, y + dheight * (hovered_element + 1) + 1, dwidth - 2, dheight - 2);
      }

      fill(255);
      stroke(255);
      strokeWeight(1);

      for (int line_num = 0; line_num < options.length; line_num++) {
        line(x, y + dheight * (2 + line_num), x + dwidth, y + dheight * (2 + line_num));
      }
      
      textAlign(CENTER, CENTER);
      textSize(PApplet.parseInt(dheight * 0.5f));
      
      text(text, x, y, dwidth, dheight);
      
      //textAlign(LEFT, CENTER);
      //textSize(int(dheight * 0.5f));

      //for (int line_num = 0; line_num < options.length; line_num++) {
      //  text(options[line_num], x + 10, y + dheight * (2 + line_num) - dheight / 2);
      //}
      
      for (int line_num = 0; line_num < options.length; line_num++) {
        text(options[line_num], x, y + dheight * (1 + line_num), dwidth, dheight);
      }
    }
  }
}
class Final_state {
  int x;
  int y;
  
  float rotation;
  
  int image_width;
  int image_height;
  
  float visibility;
  
  int layer;
  
  int[] fill_color;
  
  Final_state (int[] fill_color, int layer){
    this.fill_color = fill_color;
    this.layer = layer;
  }
  
  Final_state (int x, int y, float rotation, int image_width, int image_height, int layer, float visibility){
    this.x = x;
    this.y = y;
    this.rotation = rotation;
    this.layer = layer;
    this.visibility = visibility;
    this.image_width = image_width;
    this.image_height = image_height;
  }
}
class Interface {
  //modes "Animation_Editor", "Name_Sprite", "Options", "Export"
  String mode = "Animation_Editor";
  
  //animation window
  int y_value = 0;
  
  int animation_window_x = 384;
  int animation_window_y = 125;
  int animation_window_width = 1152;
  int animation_window_height = 648;
  
  
  //Play / Stop button common settings
  int play_stop_buttons_dist = 70;
  int play_stop_buttons_window_offset = 35;
  int play_stop_buttons_width = 30;
  
  //Play button
  int play_button_x = animation_window_x + (animation_window_width / 2) - play_stop_buttons_dist / 2;
  int play_button_y = animation_window_y + animation_window_height + play_stop_buttons_window_offset;
  
  //Stop button
  int stop_button_x = animation_window_x + (animation_window_width / 2) + play_stop_buttons_dist / 2;
  int stop_button_y = animation_window_y + animation_window_height + play_stop_buttons_window_offset;
  
  //Playing
  boolean playing = false;
  
  //sprite window
  int sprite_window_x = 1580;
  int sprite_window_y = 100;
  int sprite_window_width = 300;
  int sprite_window_height = 700;
  
  int sprite_element_height = 50;
  
  int sprite_window_scrollbar_x = sprite_window_x + sprite_window_width + 10;
  int sprite_window_scrollbar_y = sprite_window_y;
  int sprite_window_scrollbar_width = 20;
  int sprite_window_scrollbar_height = sprite_window_height;
  
  int sprite_window_offset_height = 0;
  
  int sprite_window_scrollbar_length = 0;
  
  int sprite_window_offset = 0;
  
  //Sprite settings window
  int sprite_settings_x = 20;
  int sprite_settings_y = 100;
  int sprite_settings_width = 320;
  int sprite_settings_height = 700;
  
  int sprite_settings_element_height = 50;
  
  //new image button
  int rect_x = 1650;
  int rect_y = 825;
  int rect_width = 200;
  int rect_height = 50;
  
  //settings button
  int settings_x = 1920 - 25 - 10;
  int settings_y = 1080 - 25 - 10;

  //Sprite settings
  
  int textbox_width_offset = 5;
  
  String previous_type = "Image";
  
  int[] textbox_width;
  int[] textbox_offset;
  int[] current_fill_color;
  
  String[] texts;

  //textbox
  int tBox_x = 735;
  int tBox_y = 515;
  int tBox_width = 300;
  int tBox_height = 50;
  
  String currentName;
  
  int name_length;
  
  Boolean textBox_clicked = false;
  
  //timeline
  int timeline_x = 210;
  int timeline_y = 925;
  int timeline_width = 1500;
  int timeline_height = 125;
  
  int timeline_state_width = 10;
  
  int zoom = 5;
  
  int videoLength = 10  //minutes
                   *60  //seconds
                   *60; //frames
  
  int scroll = 0;
  
  int playhead_position = 0;
  
  Boolean zoom_available = true;
  
  int[] zoom_levels = {1, 2, 5, 10, 30, 60, 120, 240, 600, 1200, 2400, 4800};
  //int[] zoom_levels = {1, 2, 4, 30, 60, 120, 240, 600};
  
  int element_dist = 100;
  
  int m;
  int s;
  int f;
  
  String ms;
  String ss;
  String fs;
  
  int sprite_selected_index = 0;
  
  int sprite_hovered_index = 0;
  
  boolean sprite_hovered = false;
  
  boolean sprite_selected = false;
  
  //current settings
  int current_x = 0;
  int current_y = 0;
  
  int current_width = 0;
  int current_height = 0;
  
  float current_rotation = 0;
  
  int current_layer = 0;
  
  float current_visibility = 0;
  
  String[] current_interval_types;
  
  //latest settings
  int latest_x = 0;
  int latest_y = 0;
  float latest_rotation = 0;
  
  int rotation_slider_distance = 50;
  
  //actual settings
  int video_quality = 100;
  float framerate = 60;
  
  //video quality slider
  int vqs_x = 325;
  int vqs_y = 25;
  int vqs_width = 200;
  int vqs_height = 50;
  
  //framerate slider
  int frs_x = 325;
  int frs_y = 100;
  int frs_width = 240;
  int frs_height = 50;
  
  //scroll bar
  int scroll_bar_x = timeline_x - 2;
  int scroll_bar_y = timeline_y + 130;
  int scroll_bar_width = 1504;
  int scroll_bar_height = 20;
  
  int scroll_x;
  int scroll_y = scroll_bar_y + 1;
  int scroll_width;
  int scroll_height = scroll_bar_height - 1;
  
  //(Add | Remove) state buttons
  int green_plus_x = sprite_settings_x + sprite_settings_width - 75;
  int green_plus_y = sprite_settings_y + sprite_settings_height + 30;
  int green_plus_width = 30;
  int green_plus_height = 30;
  
  int red_minus_x = sprite_settings_x + sprite_settings_width - 15;
  int red_minus_y = sprite_settings_y + sprite_settings_height + 30;
  int red_minus_width = 30;
  int red_minus_height = 30;
  
  //zoom indicator
  int zoom_width = 200;
  int zoom_x = (timeline_x + (timeline_width / 2)) - (zoom_width / 2);
  int zoom_y = 860;
  
  //Snap button
  int snap_button_x = 180;
  int snap_button_y = 956;
  
  //Export button
  int export_button_x = 1810;
  int export_button_y = 1045;
  
  //Last state frame
  int last_frame = 0;
  
  //Sprite drag element
  int sprite_drag_snap_size = 20;
  
  //Sprite visibility mode button
  int sprite_mode_x = 1500;
  int sprite_mode_y = 800;
  
  //Instant update button
  int instant_updates_x = 210;
  int instant_updates_y = 830;
  
  //Sprite rotation box snap
  float rotation_box_snap = 22.5f;
  
  Interface(){
    
    textbox_width = new int[7];
    
    textbox_width[0] = 25;
    textbox_width[1] = 25;
    textbox_width[2] = 25;
    textbox_width[3] = 25;
    textbox_width[4] = 25;
    textbox_width[5] = 25;
    textbox_width[6] = 25;
    
    textbox_offset = new int[7];
    
    textbox_offset[0] = 150;
    textbox_offset[1] = 150;
    textbox_offset[2] = 200;
    textbox_offset[3] = 210;
    textbox_offset[4] = 225;
    textbox_offset[5] = 230;
    textbox_offset[6] = 190;
    
    texts = new String[7];
    texts[0] = "Position x";
    texts[1] = "Position y";
    texts[2] = "Element width";
    texts[3] = "Element height";
    texts[4] = "Element rotation";
    texts[5] = "Element visibility";
    texts[6] = "Element layer";
    
    current_fill_color = new int[3];
    current_fill_color[0] = 255;
    current_fill_color[1] = 255;
    current_fill_color[2] = 255;
  }
  
  public void show(){
    if (mode == "Animation_Editor"){
      
      if (sprite_dragging){
        current_x = PApplet.parseInt((float) (mouseX - animation_window_x) * (float) (1920f / animation_window_width));
        current_y = PApplet.parseInt((float) (mouseY - animation_window_y) * (float) (1080f / animation_window_height));
        
        if (is_snap_pressed){
          current_x = round(current_x / sprite_drag_snap_size) * sprite_drag_snap_size;
          current_y = round(current_y / sprite_drag_snap_size) * sprite_drag_snap_size;
        }
        
        if (current_x > 1919){
          current_x = 1919;
        }
        else if (current_x < 0){
          current_x = 0;
        }
        
        if (current_y > 1079){
          current_y = 1079;
        }
        else if (current_y < 0){
          current_y = 0;
        }
        
        latest_x = current_x;
        latest_y = current_y;
        
        //if (instant_update){
        //  boolean stateExists = false;
        //  int index = 0;
          
        //  for (State state : sprites.get(sprite_selected_index).states){
            
        //    if (state.frame == playhead_position){
        //      stateExists = true;
        //      break;
        //    }
            
        //    index++;
        //  }
          
        //  if (stateExists){
        //    sprites.get(sprite_selected_index).states.get(index).x = current_x;
        //    sprites.get(sprite_selected_index).states.get(index).y = current_y;
        //  }
          
        //  update_penalty = true;
        //}
        
        //updateCurrentState();
        updateTextboxWidths();
      }
      else if (sprite_rotating){
        
        current_rotation = round(((degrees(atan2(mouseY - (int) (interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) interface1.latest_y / 1080f)), mouseX - (int) (animation_window_x + (float) (animation_window_width) * ((float) current_x / 1920f)))) + 180 + 270) % 360));
      
        if (is_snap_pressed){
          current_rotation = round(current_rotation / (float) rotation_box_snap) * (float) rotation_box_snap;
        }
      
        latest_rotation = current_rotation;
        
        updateTextboxWidths();
      }
      
      if (sprite_window_scrollbar_moving){
        //sprite_window_offset_height = (int) (mouseY - sprite_window_scrollbar_y - sprite_window_scrollbar_length / 2f - sprite_window_scrollbar_moving_offset);
        sprite_window_offset = (int) ((mouseY - sprite_window_scrollbar_length / 2f - sprite_window_scrollbar_moving_offset) * ((sprites.size() * sprite_element_height) / (float) sprite_window_scrollbar_height));
        
        if (sprites.size() > 14){
          if (sprite_window_offset > (sprites.size() - 14) * sprite_element_height){
            sprite_window_offset = (sprites.size() - 14) * sprite_element_height;
          }
          else if (sprite_window_offset < 0){
            sprite_window_offset = 0;
          }
        }
        else {
          if (sprite_window_offset > 0){
            sprite_window_offset = 0;
          }
          else if (sprite_window_offset < 0){
            sprite_window_offset = 0;
          }
        }
        
        sprite_window_offset_height = (int) (((float) sprite_window_scrollbar_height / sprites.size()) * (sprite_window_offset / 50f));
      }
      else {
        sprite_window_offset_height = (int) (((float) sprite_window_scrollbar_height / sprites.size()) * (sprite_window_offset / 50f));
      }
      
      if (playing == true){
        playhead_position++;
        updateCurrentState();
        updateTextboxWidths();
        
        if (playhead_position > videoLength - 1){
          playhead_position = videoLength - 1;
        }
        
        //Adjust scroll to match playhead
        if (interface1.playhead_position > interface1.scroll + interface1.zoom_levels[interface1.zoom] * 15){
          interface1.scroll = interface1.playhead_position - interface1.zoom_levels[interface1.zoom] * 15;
        }
      }
      else {
        if (playhead_position > videoLength - 1){
          playhead_position = videoLength - 1;
        }
      }
      
      if (playhead_moving == true){
        if (is_snap_pressed){
          playhead_position = round(round(scroll + PApplet.parseFloat(mouseX - scroll_bar_x) / timeline_width * zoom_levels[zoom] * 15) / 10f) * 10;
        }
        else {
          playhead_position = round(scroll + PApplet.parseFloat(mouseX - scroll_bar_x) / timeline_width * zoom_levels[zoom] * 15);
        }
        
        if (playhead_position < scroll){
          playhead_position = scroll;
        }
        else if (playhead_position > scroll + zoom_levels[zoom] * 15){
          playhead_position = scroll + zoom_levels[zoom] * 15;
        }
        
        updateCurrentState();
        updateTextboxWidths();
      }
      
      if (scrollbar_moving == true){
        scroll = round(((mouseX - scroll_bar_x - PApplet.parseInt(PApplet.parseFloat(zoom_levels[zoom] * 15) / PApplet.parseFloat(videoLength) * PApplet.parseFloat(scroll_bar_width)) / 2) / PApplet.parseFloat(scroll_bar_width)) * videoLength);
        
        if (scroll < 0){
          scroll = 0;
        }
        else if (scroll > videoLength - (zoom_levels[zoom] * 15)){
          scroll = videoLength - (zoom_levels[zoom] * 15);
        }
      }
      
      //Check if out of bounds
      if (playhead_position > videoLength - 1){
        playhead_position = videoLength - 1;
      }
      
      //animation window
      //noFill();
      ////stroke(100);
      ////strokeWeight(1);
      //noStroke();
      //rect(animation_window_x + 1, animation_window_y + 1, animation_window_width, animation_window_height);
      
      //sprites
      textAlign(LEFT, CENTER);
      fill(200);
      strokeWeight(1);
      stroke(255);
      rect(sprite_window_x, sprite_window_y, sprite_window_width, sprite_window_height);
      
      if (sprite_hovered == true){
        fill(180);
        noStroke();
        rect(sprite_window_x + 2, sprite_window_y + sprite_element_height * sprite_hovered_index - sprite_window_offset, sprite_window_width - 4, sprite_element_height);
      }
      if (sprite_selected == true){
        fill(160);
        noStroke();
        rect(sprite_window_x + 2, sprite_window_y + sprite_element_height * sprite_selected_index - sprite_window_offset, sprite_window_width - 4, sprite_element_height);
      }
      
      //Sprite window scrollbar
      
      if (sprites.size() > 14){
        sprite_window_scrollbar_length = (int) (sprite_window_scrollbar_height / (sprites.size() / 14f));
      }
      else {
        sprite_window_scrollbar_length = sprite_window_scrollbar_height;
      }
      
      stroke(100);
      strokeWeight(1);
      noFill();
      rect(sprite_window_scrollbar_x, sprite_window_scrollbar_y, sprite_window_scrollbar_width, sprite_window_scrollbar_height);
      
      noStroke();
      fill(255);
      rect(sprite_window_scrollbar_x + 1, sprite_window_scrollbar_y + sprite_window_offset_height, sprite_window_scrollbar_width - 2, sprite_window_scrollbar_length);
      
      //Sprite window
      
      y_value = 0;
      noFill();
      stroke(255);
      strokeWeight(1);
      
      int sprites_scrolled = floor(sprite_window_offset / sprite_element_height);
      
      if (sprites.size() > 14){
        for (int index = sprites_scrolled; index < sprites_scrolled + 15; index++){
          try {
            noFill();
            rect(sprite_window_x, sprite_window_y + (y_value * 50) - sprite_window_offset % 50, 300, sprite_element_height);
            textSize(25);
            fill(0);
            
            text(sprites.get(index).name, sprite_window_x + 25, sprite_window_y + (y_value * 50) + (sprite_element_height / 2) - sprite_window_offset % 50);
            
            try {
              switch (sprites.get(index).type){
                case "Image":
                  image(sprites.get(index).image, sprite_window_x + 275 + 1, sprite_window_y + 25 + (y_value * 50) - sprite_window_offset % 50 + 1, 50 - 1, 50 - 1);
                break;
                
                case "Background":
                  image(background_icon, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50) - sprite_window_offset % 50, 50, 50);
                break;
                
                case "Rectangle":
                  image(rectangle, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50) - sprite_window_offset % 50, 50, 50);
                break;
                
                case "Ellipse":
                  image(ellipse, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50) - sprite_window_offset % 50, 50, 50);
                break;
                  
                default:
                  image(no_icon, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50) - sprite_window_offset % 50, 50, 50);
                break;
              }
            } catch (Exception e){
              image(no_icon, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50) - sprite_window_offset % 50, 50, 50);
            }
            y_value++;
          }
          catch (Exception e){
            
          }
        }
      }
      else {
        for (int index = 0; index < sprites.size(); index++){
          noFill();
          rect(sprite_window_x, sprite_window_y + (y_value * 50), 300, sprite_element_height);
          textSize(25);
          fill(0);
          
          text(sprites.get(index).name, sprite_window_x + 25, sprite_window_y + (y_value * 50) + (sprite_element_height / 2));
          
          try {
            switch (sprites.get(index).type){
              case "Image":
                image(sprites.get(index).image, sprite_window_x + 275 + 1, sprite_window_y + 25 + (y_value * 50) + 1, 50 - 1, 50 - 1);
              break;
              
              case "Background":
                image(background_icon, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50), 50, 50);
              break;
              
              case "Rectangle":
                image(rectangle, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50), 50, 50);
              break;
              
              case "Ellipse":
                image(ellipse, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50), 50, 50);
              break;
                
              default:
                image(no_icon, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50), 50, 50);
              break;
            }
          } catch (Exception e){
            image(no_icon, sprite_window_x + 275, sprite_window_y + 25 + (y_value * 50), 50, 50);
          }
          y_value++;
        }
      }
      
      fill(background_color[0], background_color[1], background_color[2]);
      noStroke();
      rect(sprite_window_x, sprite_window_y - sprite_element_height - 1, sprite_window_width + 1, sprite_element_height);
      rect(sprite_window_x, sprite_window_y + sprite_window_height + 1, sprite_window_width + 1, sprite_element_height);
      
      //zoom indicator
      image(plus, zoom_x - 20, zoom_y);
      image(minus, zoom_x + zoom_width + 20 - 3, zoom_y);
      noFill();
      //stroke(50);
      stroke(255);
      strokeWeight(1);
      rect(zoom_x, zoom_y - 3, zoom_width - 3, 6);
      fill(0, 150, 255);
      noStroke();
      
      rect(zoom_x, zoom_y - 3, ((zoom_width + 1) / (zoom_levels.length - 1)) * zoom, 6);
      
      //settings button
      fill(255);
      stroke(200);
      strokeWeight(2);
      //rect(settings_x - 26, settings_y - 26, 52, 52);
      image(settings_icon, settings_x, settings_y);
      
      //timeline
      textAlign(CENTER, BOTTOM);
      textSize(20);
      noFill();
      strokeWeight(1);
      
      //zoom-----------------------
      
      int offset_dist = PApplet.parseInt((PApplet.parseFloat(scroll) / zoom_levels[zoom]) * (PApplet.parseFloat(timeline_width) / 15));
      
      for (int line = round(scroll / zoom_levels[zoom]); line < videoLength + 1; line++){
        
        if ((element_dist * line) - offset_dist >= 0 && (element_dist * line) - offset_dist <= timeline_width){
      
          //////////calculations/////////////////
          m = floor((((frame - 1) + (zoom_levels[zoom] * line)) / 3600) % 60);
          s = floor((((frame - 1) + (zoom_levels[zoom] * line)) / 60) % 60);
          f = ((frame - 1) + (zoom_levels[zoom] * line)) % 60;
          
          //minutes
          if (m == 0){
            ms = "00";
          }
          else{
            if (m > 9){
              ms = str(m);
            }
            else{
              ms = "0" + str(m);
            }
          }
          
          //seconds
          if (s == 0){
            ss = "00";
          }
          else{
            if (s > 9){
              ss = str(s);
            }
            else{
              ss = "0" + str(s);
            }
          }
          
          //frames
          if (f == 0){
            fs = "00";
          }
          else{
            if (f > 9){
              fs = str(f);
            }
            else{
              fs = "0" + str(f);
            }
          }
          
          ////////////////////////
        
          textAlign(CENTER, BOTTOM);
          textSize(20);
          
          noFill();
          stroke(200);
          strokeWeight(1);
          
          rect(timeline_x + (element_dist * line) - offset_dist, timeline_y, 0, timeline_height);
          fill(255);
          text(ms + ":" + ss + ":" + fs, timeline_x + (element_dist * line) - offset_dist, timeline_y - 5);
        }
        
      }
      
      ///////////zoom---------------------- // activate zoom
      
      //timeline
      textAlign(LEFT, CENTER);
      
      stroke(200);
      strokeWeight(4);
      noFill();
      rect(timeline_x, timeline_y, timeline_width, timeline_height);
      
      //draw playhead if in view
      stroke(150, 150, 255);
      strokeWeight(5);
      if (playhead_position >= scroll && playhead_position <= scroll + (zoom_levels[zoom] * 15)){
        line(timeline_x + ((PApplet.parseFloat(timeline_width) / (zoom_levels[zoom] * 15)) * playhead_position) - offset_dist, timeline_y, timeline_x + ((PApplet.parseFloat(timeline_width) / (zoom_levels[zoom] * 15)) * playhead_position) - offset_dist, timeline_y + timeline_height);
      }
      stroke(255);
      strokeWeight(2);
      
      //Show state lines
      noFill();
      strokeWeight(1);
      stroke(100);
      if (sprite_selected == true){
        for (int count = 0; count < textbox_offset.length; count++){
          line(timeline_x + 2, timeline_y + (float) (timeline_height / textbox_offset.length) * (0.5f + count) + 2, timeline_x + timeline_width - 4, timeline_y + (float) (timeline_height / textbox_offset.length) * (0.5f + count) + 2);
        }
      }
      
      //Show states on timeline
      fill(0, 255, 0);
      stroke(255);
      strokeWeight(1);
      if (sprite_selected == true){
        int it_state_index = 0;
        for (State state1 : sprites.get(sprite_selected_index).states){
          if (state1.frame >= scroll && state1.frame <= scroll + zoom_levels[zoom] * 15){
            if (sprites.get(sprite_selected_index).type == "Background"){
              
              for (int count = 0; count < textbox_offset.length; count++){
                rect(timeline_x + (float) (state1.frame - scroll) * (timeline_width / (float) (zoom_levels[zoom] * 15)) - timeline_state_width / 2, timeline_y + 2 + (float) (timeline_height / textbox_offset.length) * (0.5f + count) - timeline_state_width / 2,  timeline_state_width, timeline_state_width);
              }
            }
            else if (sprites.get(sprite_selected_index).type == "Image"){
              
              try {
                
                State previous_state = sprites.get(sprite_selected_index).states.get(it_state_index - 1);
                
                if (state1.x != -1){
                  rect(timeline_x + (float) (state1.frame - scroll) * (timeline_width / (float) (zoom_levels[zoom] * 15)) - timeline_state_width / 2, timeline_y + 2 + (float) (timeline_height / textbox_offset.length) * (0.5f) - timeline_state_width / 2,  timeline_state_width, timeline_state_width);
                }
                
                if (state1.y != -1){
                  rect(timeline_x + (float) (state1.frame - scroll) * (timeline_width / (float) (zoom_levels[zoom] * 15)) - timeline_state_width / 2, timeline_y + 2 + (float) (timeline_height / textbox_offset.length) * (0.5f + 1) - timeline_state_width / 2,  timeline_state_width, timeline_state_width);
                }
                
                if (state1.image_width != -1){
                  rect(timeline_x + (float) (state1.frame - scroll) * (timeline_width / (float) (zoom_levels[zoom] * 15)) - timeline_state_width / 2, timeline_y + 2 + (float) (timeline_height / textbox_offset.length) * (0.5f + 2) - timeline_state_width / 2,  timeline_state_width, timeline_state_width);
                }
                
                if (state1.image_height != -1){
                  rect(timeline_x + (float) (state1.frame - scroll) * (timeline_width / (float) (zoom_levels[zoom] * 15)) - timeline_state_width / 2, timeline_y + 2 + (float) (timeline_height / textbox_offset.length) * (0.5f + 3) - timeline_state_width / 2,  timeline_state_width, timeline_state_width);
                }
                
                if (state1.rotation != -1){
                  rect(timeline_x + (float) (state1.frame - scroll) * (timeline_width / (float) (zoom_levels[zoom] * 15)) - timeline_state_width / 2, timeline_y + 2 + (float) (timeline_height / textbox_offset.length) * (0.5f + 4) - timeline_state_width / 2,  timeline_state_width, timeline_state_width);
                }
                
                if (state1.visibility != -1){
                  rect(timeline_x + (float) (state1.frame - scroll) * (timeline_width / (float) (zoom_levels[zoom] * 15)) - timeline_state_width / 2, timeline_y + 2 + (float) (timeline_height / textbox_offset.length) * (0.5f + 5) - timeline_state_width / 2,  timeline_state_width, timeline_state_width);
                }
                
                if (state1.layer != -1){
                  rect(timeline_x + (float) (state1.frame - scroll) * (timeline_width / (float) (zoom_levels[zoom] * 15)) - timeline_state_width / 2, timeline_y + 2 + (float) (timeline_height / textbox_offset.length) * (0.5f + 6) - timeline_state_width / 2,  timeline_state_width, timeline_state_width);
                }
                
              } catch (Exception e){
                
                for (int count = 0; count < textbox_offset.length; count++){
                  rect(timeline_x + (float) (state1.frame - scroll) * (timeline_width / (float) (zoom_levels[zoom] * 15)) - timeline_state_width / 2, timeline_y + 2 + (float) (timeline_height / textbox_offset.length) * (0.5f + count) - timeline_state_width / 2,  timeline_state_width, timeline_state_width);
                }
              }
            }
          }
          
          it_state_index++;
        }
      }
      
      //timeline scroll bar
      fill(50, 50, 50); //background
      stroke(125);
      strokeWeight(2);
      rect(scroll_bar_x, scroll_bar_y, scroll_bar_width, scroll_bar_height);
      
      //calculations
      try {
        scroll_width = PApplet.parseInt(PApplet.parseFloat(zoom_levels[zoom] * 15) / PApplet.parseFloat(videoLength) * PApplet.parseFloat(scroll_bar_width));
        scroll_x = PApplet.parseInt(scroll_bar_x + (PApplet.parseFloat(scroll) / videoLength) * scroll_bar_width);
      } catch (Exception e) {
        
      }
      
      fill(220);
      noStroke();
      rect(scroll_x, scroll_y, scroll_width, scroll_height);
      
      fill(200);
      strokeWeight(1);
      stroke(255);
      rect(sprite_settings_x, sprite_settings_y, sprite_settings_width, sprite_settings_height);
      
      if (sprite_selected == true){
        
        if (sprite_settings_selected == true){
          fill(160);
          noStroke();
          rect(sprite_settings_x + 2, sprite_settings_y + 2 + sprite_settings_element_height * sprite_settings_selected_index, sprite_settings_width - 2, sprite_settings_element_height - 2);
        }
        
        for (int i = 0; i < textbox_offset.length; i++){
          noFill();
          strokeWeight(1);
          stroke(255);
          
          line(sprite_settings_x, sprite_settings_y + ((i + 1) * sprite_settings_element_height), sprite_settings_x + sprite_settings_width, sprite_settings_y + ((i + 1) * sprite_settings_element_height));
        
          fill(background_color[0], background_color[1], background_color[2]);
          strokeWeight(1);
          stroke(255);
          
          rect(sprite_settings_x + textbox_offset[i] - textbox_width_offset, sprite_settings_y + (i + 0.5f) * sprite_settings_element_height - sprite_settings_element_height / 4 + 3, textbox_width[i], sprite_settings_element_height / 2);   
          
          if (sprites.get(sprite_selected_index).type == "Background" && i == 0){
            rect(sprite_settings_x + textbox_offset[i] - textbox_width_offset + textbox_width[i] + 10, sprite_settings_y + (i + 0.5f) * sprite_settings_element_height - sprite_settings_element_height / 4 + 3, textbox_width[i + 1], sprite_settings_element_height / 2);
            rect(sprite_settings_x + textbox_offset[i] - textbox_width_offset + textbox_width[i] + textbox_width[i + 1] + 20, sprite_settings_y + (i + 0.5f) * sprite_settings_element_height - sprite_settings_element_height / 4 + 3, textbox_width[i + 2], sprite_settings_element_height / 2);
          }
          
          fill(255);
          noStroke();
          textSize(sprite_settings_element_height / 2);
          textAlign(LEFT, CENTER);
          
          text(texts[i], sprite_settings_x + 10, sprite_settings_y + ((i + 0.5f) * sprite_settings_element_height));
        }
        
        for (int count = 0; count < current_interval_types.length; count++){
          switch (current_interval_types[count]){
            case "linear":
              image(linear, sprite_settings_x + sprite_settings_width - 19, sprite_settings_y + (0.58f + count) * sprite_settings_element_height, 25, 25);
            break;
            
            case "ease_out":
              image(ease_out, sprite_settings_x + sprite_settings_width - 19, sprite_settings_y + (0.58f + count) * sprite_settings_element_height, 25, 25);
            break;
            
            case "ease_in":
              image(ease_in, sprite_settings_x + sprite_settings_width - 19, sprite_settings_y + (0.58f + count) * sprite_settings_element_height, 25, 25);
            break;
            
            case "integer":
              image(integer, sprite_settings_x + sprite_settings_width - 19, sprite_settings_y + (0.58f + count) * sprite_settings_element_height, 25, 25);
            break;
          }
        }
        
        if (sprites.get(sprite_selected_index).type == "Image"){
        
          text(current_x, sprite_settings_x + textbox_offset[0], sprite_settings_y + ((0 + 0.5f) * sprite_settings_element_height));
          text(current_y, sprite_settings_x + textbox_offset[1], sprite_settings_y + ((1 + 0.5f) * sprite_settings_element_height));
          text(current_width, sprite_settings_x + textbox_offset[2], sprite_settings_y + ((2 + 0.5f) * sprite_settings_element_height));
          text(current_height, sprite_settings_x + textbox_offset[3], sprite_settings_y + ((3 + 0.5f) * sprite_settings_element_height));
          
          if (sprite_settings_typing == true && sprite_settings_index == 4){
            text(floats[sprite_settings_index], sprite_settings_x + textbox_offset[4], sprite_settings_y + ((4 + 0.5f) * sprite_settings_element_height));
          }
          else {
            text(str(current_rotation), sprite_settings_x + textbox_offset[4], sprite_settings_y + ((4 + 0.5f) * sprite_settings_element_height));
          }
          if (sprite_settings_typing == true && sprite_settings_index == 5){
            text(floats[sprite_settings_index], sprite_settings_x + textbox_offset[5], sprite_settings_y + ((5 + 0.5f) * sprite_settings_element_height));
          }
          else {
            text(str(current_visibility), sprite_settings_x + textbox_offset[5], sprite_settings_y + ((5 + 0.5f) * sprite_settings_element_height));
          }
          
          text(current_layer, sprite_settings_x + textbox_offset[6], sprite_settings_y + ((6 + 0.5f) * sprite_settings_element_height));
        }
        else if (sprites.get(sprite_selected_index).type == "Background"){
          text(current_fill_color[0], sprite_settings_x + textbox_offset[0], sprite_settings_y + (0.5f) * sprite_settings_element_height);
          text(current_fill_color[1], sprite_settings_x + textbox_offset[0] + 10 + textbox_width[0], sprite_settings_y + (0.5f) * sprite_settings_element_height);
          text(current_fill_color[2], sprite_settings_x + textbox_offset[0] + 20 + textbox_width[0] + textbox_width[1], sprite_settings_y + (0.5f) * sprite_settings_element_height);
        }
      }
      
      //Add / Remove state
      image(green_plus, green_plus_x, green_plus_y, green_plus_width, green_plus_height);
      image(red_minus, red_minus_x, red_minus_y, red_minus_width, red_minus_height);
      
      //Play / Stop buttons
      image(play, play_button_x, play_button_y, play_stop_buttons_width, play_stop_buttons_width);
      image(stop, stop_button_x, stop_button_y, play_stop_buttons_width, play_stop_buttons_width);
      
      if (is_snap_pressed){
        image(snap_pressed, snap_button_x, snap_button_y);
      }
      else {
        image(snap_unpressed, snap_button_x, snap_button_y);
      }
      
      //Export button
      image(export, export_button_x, export_button_y);
      
      if (sprite_mode){
        image(eye_opened, sprite_mode_x, sprite_mode_y);
      }
      else {
        image(eye_closed, sprite_mode_x, sprite_mode_y);
      }
      
      //Instant update button
      //if (instant_update){
      //  image(updates_on, instant_updates_x, instant_updates_y);
      //}
      //else {
      //  image(updates_off, instant_updates_x, instant_updates_y);
      //}
      
      if (sprite_selected == true && sprites.get(sprite_selected_index).type != "Background"){
        //Element drag box
        fill(0, 255, 0);
        stroke(0);
        strokeWeight(1);
        
        try {
          rect(interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) latest_x / 1920f) - timeline_state_width / 2, interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) latest_y / 1080f) - timeline_state_width / 2, timeline_state_width, timeline_state_width);
        } catch (Exception e){
          rect(interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) current_x / 1920f) - timeline_state_width / 2, interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) current_y / 1080f) - timeline_state_width / 2, timeline_state_width, timeline_state_width);
        }
        
        //Element rotation box
        fill(0, 255, 0);
        stroke(0);
        strokeWeight(1);
        
        pushMatrix();
        
        try {
          translate(interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) latest_x / 1920f), interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) latest_y / 1080f));
          rotate(radians(latest_rotation));
        } catch (Exception e){
          translate(interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) current_x / 1920f), interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) current_y / 1080f));
          rotate(radians(current_rotation));
        }
        
        ellipse(0, -rotation_slider_distance, 10, 10);
        
        popMatrix();
      }
      
      //Show dropdown menus
      for (Dropdown_menu menu : dropdown_menus){
        menu.update_no_click(mouseX, mouseY);
        menu.show();
      }
      
      //Update sprite hovers
      if (isMouseOn(sprite_window_x, sprite_window_y, sprite_window_width, sprite_settings_element_height * sprites.size(), "CORNER")){
        sprite_hovered = true;
        sprite_hovered_index = floor((float) (mouseY - interface1.sprite_window_y + interface1.sprite_window_offset % interface1.sprite_element_height) / (float) interface1.sprite_element_height) + floor(interface1.sprite_window_offset / interface1.sprite_element_height);
      }
      else {
        sprite_hovered = false;
      }
      
      //Update mouse cursor textbox input icon
      if (sprite_selected == true && isMouseOn(sprite_settings_x, sprite_settings_y, sprite_settings_width, sprite_settings_height, "CORNER")){
        boolean mouseIsOn = false;
        
        if (sprites.get(sprite_selected_index).type == "Image"){
          for (int count = 0; count < textbox_offset.length; count++){
            if (isMouseOn((int) (sprite_settings_x + textbox_offset[count] - textbox_width_offset), (int) (sprite_settings_y + (count + 0.5f) * sprite_settings_element_height - sprite_settings_element_height / 4 + 3), textbox_width[count], (int) (sprite_settings_element_height / 2), "CORNER")){
              if (cursor != "TEXT"){
                cursor(TEXT);
                cursor = "TEXT";
              }
              
              mouseIsOn = true;
              
              break;
            }
          }
        }
        else if (sprites.get(sprite_selected_index).type == "Background"){
          if (isMouseOn((int) (sprite_settings_x + textbox_offset[0] - textbox_width_offset), (int) (sprite_settings_y + (0.5f) * sprite_settings_element_height - sprite_settings_element_height / 4 + 3), (int) (textbox_width[0]), (int) (sprite_settings_element_height / 2), "CORNER")){
            mouseIsOn = true;
          }
          else if (isMouseOn((int) (sprite_settings_x + textbox_offset[0] - textbox_width_offset + textbox_width[0] + 10), (int) (sprite_settings_y + (0.5f) * sprite_settings_element_height - sprite_settings_element_height / 4 + 3), (int) (textbox_width[1]), (int) (sprite_settings_element_height / 2), "CORNER")){
            mouseIsOn = true;
          }
          else if (isMouseOn((int) (sprite_settings_x + textbox_offset[0] - textbox_width_offset + textbox_width[0] + textbox_width[1] + 20), (int) (sprite_settings_y + (0.5f) * sprite_settings_element_height - sprite_settings_element_height / 4 + 3), (int) (textbox_width[2]), (int) (sprite_settings_element_height / 2), "CORNER")){
            mouseIsOn = true;
          }
        }
        
        if (mouseIsOn == false){
          if (cursor != "ARROW"){
            cursor(ARROW);
            cursor = "ARROW";
          }
        }
        else {
          if (cursor != "TEXT"){
            cursor(TEXT);
            cursor = "TEXT";
          }
        }
        
        mouseIsOn = false;
      }
      else {
        if (cursor != "ARROW"){
          cursor(ARROW);
          cursor = "ARROW";
        }
      }
    }
    else if (mode == "Name_Sprite"){
      background(50);
      stroke(200);
      strokeWeight(2);
      fill(255);
      
      //textBox
      rect(tBox_x, tBox_y, tBox_width, tBox_height);
      fill(100);
      textSize(30);
      textAlign(LEFT, CENTER);
      text(currentName, tBox_x + 25, tBox_y + (tBox_height / 2));
      
      
      //Checkmark
      fill(255);
      rect(tBox_x + tBox_width + 50, tBox_y, 50, 50);
      image(check_mark, tBox_x + tBox_width + 75, tBox_y + 25);
      
      if (textBox_clicked == true){
        noStroke();
        fill(200);
        rect(tBox_x + 5, tBox_y + tBox_height + 5, tBox_width - 10, 2);
      }
    }
    else if (mode == "Options"){
      
      //video quality slider
      textAlign(RIGHT, CENTER);
      textSize(35);
      fill(255);
      text("Video quality", vqs_x - 70, (vqs_y * 2) - 5);
      
      if (video_quality_clicked == true){
        video_quality = ((vqs_width / 100) * (((mouseX - vqs_x) / 4)));
      }
      
      if (video_quality < 0){
        video_quality = 0;
      }
      else if (video_quality > 100){
        video_quality = 100;
      }
      
      fill(255);
      noStroke();
      rect(vqs_x, vqs_y, ((vqs_width / 100) * video_quality),vqs_height);
  
      noFill();
      stroke(200);
      strokeWeight(2);
      rect(vqs_x, vqs_y, vqs_width, vqs_height);
      
      fill(255);
      textAlign(LEFT, CENTER);
      textSize(35);
      text(video_quality + "%", 535, 50 - 5);
      
      
      
      //framerate slider
      textAlign(RIGHT, CENTER);
      textSize(35);
      fill(255);
      text("Framerate", frs_x - 70, (frs_y + 25) - 5);
      
      if (framerate_clicked == true){
        framerate = (int) ((frs_width / 120) * (((mouseX - frs_x) / 4)));
        
        if (framerate <= 0){
          framerate = 1;
        }
      }
      
      if (framerate < 0){
        framerate = 0;
      }
      else if (framerate > 120){
        framerate = 120;
      }
      
      fill(255);
      noStroke();
      rect(frs_x, frs_y, ((frs_width / 120) * (framerate)),frs_height);
  
      noFill();
      stroke(200);
      strokeWeight(2);
      rect(frs_x, frs_y, frs_width, frs_height);
      
      fill(255);
      textAlign(LEFT, CENTER);
      textSize(35);
      text(framerate + " fps", 575, (frs_y + 25) - 5);
      
      
      //settings button
      fill(255);
      stroke(200);
      strokeWeight(2);
      //rect(settings_x - 26, settings_y - 26, 52, 52);
      image(settings_icon, settings_x, settings_y);
      
    }
    else if (mode == "Export"){
      
    }
  }
}
public void open_file(){
  selectInput("Select a file to open:", "fileSelected");
}

public void fileSelected(File selection) {
  if (selection != null) {
    if (loadImage(selection.getAbsolutePath()) != null){
      recent_image = loadImage(selection.getAbsolutePath());
      fileOpened = true;
    }
  }
}
class Point{
  int x;
  int y;
  
  int frame;
  
  Point(int x, int y, int frame){
    this.x = x;
    this.y = y;
    this.frame = frame;
  }
}
class Sprite{
  PImage image;
  
  int id;
  
  String name;
  
  String type;
  
  ArrayList<State> states = new ArrayList<State>();
  Final_state[] states_final = new Final_state[interface1.videoLength];
  
  //Image
  Sprite(String type, PImage image){
    this.type = type;
    this.image = image;
    this.id = id_assign;
    id_assign++;
    
    states.add(new State(0, 0, 0, 0, 0, 0, new String[]{"linear", "linear", "linear", "linear", "linear", "linear", "integer"}, 1, 1));
    
    //for (int count = 0; count < states_final.length; count++){
    //  states_final[count] = new Final_state(type, 0, 0, 0, 0, 0, 1, 1);
    //}
  }
 
  Sprite(String type){
    this.type = type;
    this.id = id_assign;
    id_assign++;
    
    //Background
    if (type == "Background"){
      states.add(new State(0, new String[]{"linear"}, new int[]{255, 255, 255}, 9));
    }
    
    //Ellipse / Rect
    else {
      states.add(new State(0, 0, 0, 0, 0, 0, new String[]{"linear", "linear", "linear", "linear", "linear", "integer", "linear", "linear", "linear", "linear", "integer", "integer"}, 1, 1, new int[]{0, 0, 0}, new int[]{0, 0, 0}, 1, true, true));
    }
  }
  
  public void update(){
    Animation animator = new Animation();
    
    states_final = new Final_state[interface1.videoLength];
    
    if (type == "Background"){
      for (int count = 0; count < states.size() - 1; count++){
        
        animator.reset();
        
        animator.addAnimation("red", states.get(count + 1).interval_types[0], (states.get(count + 1).frame - states.get(count).frame) / frameRate * 1000f, 1);
        animator.addAnimation("green", states.get(count + 1).interval_types[0], (states.get(count + 1).frame - states.get(count).frame) / frameRate * 1000f, 1);
        animator.addAnimation("blue", states.get(count + 1).interval_types[0], (states.get(count + 1).frame - states.get(count).frame) / frameRate * 1000f, 1);
        
        if (count != states.size() - 2){
          for (int frame = states.get(count).frame; frame < states.get(count + 1).frame; frame++){
            states_final[frame] = new Final_state(new int[]{PApplet.parseInt(states.get(count).fill_color[0] + (float) animator.getValue("red") * (float) (states.get(count + 1).fill_color[0] - states.get(count).fill_color[0])),
                                                            PApplet.parseInt(states.get(count).fill_color[1] + (float) animator.getValue("green") * (float) (states.get(count + 1).fill_color[1] - states.get(count).fill_color[1])),
                                                            PApplet.parseInt(states.get(count).fill_color[2] + (float) animator.getValue("blue") * (float) (states.get(count + 1).fill_color[2] - states.get(count).fill_color[2]))}, 9);
  
            animator.update();
          }
        }
        else {
          for (int frame = states.get(count).frame; frame <= states.get(count + 1).frame; frame++){
            states_final[frame] = new Final_state(new int[]{PApplet.parseInt(states.get(count).fill_color[0] + (float) animator.getValue("red") * (float) (states.get(count + 1).fill_color[0] - states.get(count).fill_color[0])),
                                                            PApplet.parseInt(states.get(count).fill_color[1] + (float) animator.getValue("green") * (float) (states.get(count + 1).fill_color[1] - states.get(count).fill_color[1])),
                                                            PApplet.parseInt(states.get(count).fill_color[2] + (float) animator.getValue("blue") * (float) (states.get(count + 1).fill_color[2] - states.get(count).fill_color[2]))}, 9);
  
            animator.update();
          }
        }
      }
    }
    else if (type == "Image"){
      
      for (int frame = 0; frame < states_final.length; frame++){
        states_final[frame] = new Final_state(0, 0, 0, 0, 0, 0, 0);
      }
      
      ArrayList<Integer> mask;
      
      //X position
      mask = new ArrayList<Integer>();
      
      ArrayList<Integer> values = new ArrayList<Integer>();
      
      ArrayList<Integer> indexes = new ArrayList<Integer>();
      
      for (int i = 0; i < states.size(); i++){
        if (states.get(i).x != -1){
          mask.add(states.get(i).frame);
          values.add(states.get(i).x);
          indexes.add(i);
        }
      }
      
      for (int mask_index = 0; mask_index < mask.size() - 1; mask_index++){
        animator.addAnimation("animation", states.get(indexes.get(mask_index + 1)).interval_types[0], (float) (mask.get(mask_index + 1) - mask.get(mask_index)) / frameRate * 1000f, 1);
        
        for (int frame = mask.get(mask_index); frame < mask.get(mask_index + 1); frame++){
          animator.update();
          
          states_final[frame].x = (int) (states.get(indexes.get(mask_index)).x + (float) (states.get(indexes.get(mask_index + 1)).x - states.get(indexes.get(mask_index)).x) * animator.getValue("animation"));
        }
        
        animator.reset();
      }
      
      if (states.get(states.size() - 1).frame < interface1.videoLength - 1){
        for (int index = states.get(states.size() - 1).frame; index < states.get(states.size() - 1).frame + 1; index++){
          try {
            states_final[index] = states_final[states.get(states.size() - 1).frame - 1];
          } catch (Exception e){
            break;
          }
        }
      }
      
      //Y position
      mask = new ArrayList<Integer>();
      
      indexes = new ArrayList<Integer>();
      
      for (int i = 0; i < states.size(); i++){
        if (states.get(i).y != -1){
          mask.add(states.get(i).frame);
          indexes.add(i);
        }
      }
      
      for (int mask_index = 0; mask_index < mask.size() - 1; mask_index++){
        animator.addAnimation("animation", states.get(indexes.get(mask_index + 1)).interval_types[1], (float) (mask.get(mask_index + 1) - mask.get(mask_index)) / frameRate * 1000f, 1);
        
        for (int frame = mask.get(mask_index); frame < mask.get(mask_index + 1); frame++){
          animator.update();
          
          states_final[frame].y = (int) (states.get(indexes.get(mask_index)).y + (float) (states.get(indexes.get(mask_index + 1)).y - states.get(indexes.get(mask_index)).y) * animator.getValue("animation"));
        }
        
        animator.reset();
      }
      
      //Rotation
      mask = new ArrayList<Integer>();
      
      indexes = new ArrayList<Integer>();
      
      for (int i = 0; i < states.size(); i++){
        if (states.get(i).rotation != -1){
          mask.add(states.get(i).frame);
          indexes.add(i);
        }
      }
      
      for (int mask_index = 0; mask_index < mask.size() - 1; mask_index++){
        animator.addAnimation("animation", states.get(indexes.get(mask_index + 1)).interval_types[4], (float) (mask.get(mask_index + 1) - mask.get(mask_index)) / frameRate * 1000f, 1);
        
        for (int frame = mask.get(mask_index); frame < mask.get(mask_index + 1); frame++){
          animator.update();
          
          states_final[frame].rotation = (states.get(indexes.get(mask_index)).rotation + (float) (states.get(indexes.get(mask_index + 1)).rotation - states.get(indexes.get(mask_index)).rotation) * animator.getValue("animation"));
        }
        
        animator.reset();
      }
      
      //Image width
      mask = new ArrayList<Integer>();
      
      indexes = new ArrayList<Integer>();
      
      for (int i = 0; i < states.size(); i++){
        if (states.get(i).image_width != -1){
          mask.add(states.get(i).frame);
          indexes.add(i);
        }
      }
      
      for (int mask_index = 0; mask_index < mask.size() - 1; mask_index++){
        animator.addAnimation("animation", states.get(indexes.get(mask_index + 1)).interval_types[2], (float) (mask.get(mask_index + 1) - mask.get(mask_index)) / frameRate * 1000f, 1);
        
        for (int frame = mask.get(mask_index); frame < mask.get(mask_index + 1); frame++){
          animator.update();
          
          states_final[frame].image_width = (int) (states.get(indexes.get(mask_index)).image_width + (float) (states.get(indexes.get(mask_index + 1)).image_width - states.get(indexes.get(mask_index)).image_width) * animator.getValue("animation"));
        }
        
        animator.reset();
      }
      
      //Image height
      mask = new ArrayList<Integer>();
      
      indexes = new ArrayList<Integer>();
      
      for (int i = 0; i < states.size(); i++){
        if (states.get(i).image_height != -1){
          mask.add(states.get(i).frame);
          indexes.add(i);
        }
      }
      
      for (int mask_index = 0; mask_index < mask.size() - 1; mask_index++){
        animator.addAnimation("animation", states.get(indexes.get(mask_index + 1)).interval_types[3], (float) (mask.get(mask_index + 1) - mask.get(mask_index)) / frameRate * 1000f, 1);
        
        for (int frame = mask.get(mask_index); frame < mask.get(mask_index + 1); frame++){
          animator.update();
          
          states_final[frame].image_height = (int) (states.get(indexes.get(mask_index)).image_height + (float) (states.get(indexes.get(mask_index + 1)).image_height - states.get(indexes.get(mask_index)).image_height) * animator.getValue("animation"));
        }
        
        animator.reset();
      }
      
      //Layer
      mask = new ArrayList<Integer>();
      
      indexes = new ArrayList<Integer>();
      
      for (int i = 0; i < states.size(); i++){
        if (states.get(i).layer != -1){
          mask.add(states.get(i).frame);
          indexes.add(i);
        }
      }
      
      for (int mask_index = 0; mask_index < mask.size() - 1; mask_index++){
     
        for (int frame = mask.get(mask_index); frame < mask.get(mask_index + 1); frame++){
          states_final[frame].layer = states.get(indexes.get(mask_index)).layer;
        }
      }
      
      //Visibility
      mask = new ArrayList<Integer>();
      
      indexes = new ArrayList<Integer>();
      
      for (int i = 0; i < states.size(); i++){
        if (states.get(i).visibility != -1){
          mask.add(states.get(i).frame);
          indexes.add(i);
        }
      }
      
      for (int mask_index = 0; mask_index < mask.size() - 1; mask_index++){
        animator.addAnimation("animation", states.get(indexes.get(mask_index + 1)).interval_types[5], (float) (mask.get(mask_index + 1) - mask.get(mask_index)) / frameRate * 1000f, 1);
        
        for (int frame = mask.get(mask_index); frame < mask.get(mask_index + 1); frame++){
          animator.update();
          
          states_final[frame].visibility = (states.get(indexes.get(mask_index)).visibility + (float) (states.get(indexes.get(mask_index + 1)).visibility - states.get(indexes.get(mask_index)).visibility) * animator.getValue("animation"));
        }
        
        animator.reset();
      }
    }
  }
  
  public void showPreview(int layer, int index){
    
    if (states_final[interface1.playhead_position] != null){
      //if (type == "Image"){
      //println(type + " " + states_final[interface1.playhead_position].layer + " " + layer);
      //}
      
      if (states_final[interface1.playhead_position].layer == layer){
        
        if (type == "Background"){
          fill(states_final[interface1.playhead_position].fill_color[0], states_final[interface1.playhead_position].fill_color[1], states_final[interface1.playhead_position].fill_color[2]);
          rect(interface1.animation_window_x - 1, interface1.animation_window_y - 1, interface1.animation_window_width + 1, interface1.animation_window_height + 1);
        }
        else if (type == "Image"){
          pushMatrix();
          translate(interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) states_final[interface1.playhead_position].x / 1920f), interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) states_final[interface1.playhead_position].y / 1080f));
          rotate(radians(states_final[interface1.playhead_position].rotation));
          tint(255, (float) 255 * states_final[interface1.playhead_position].visibility);
          image(image, 0, 0, (float) interface1.animation_window_width * (states_final[interface1.playhead_position].image_width / 1920f), (float) interface1.animation_window_height * (states_final[interface1.playhead_position].image_height / 1080f));
          tint(255, 255);
          //rotate(-radians(states_final[interface1.playhead_position].rotation));
          //translate(-(interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) states_final[interface1.playhead_position].x / 1920f)), -(interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) states_final[interface1.playhead_position].y / 1080f)));
          popMatrix();
        }
      }
    }
    else if (type == "Background" && layer == 9){
      fill(255);
      noStroke();
      rect(interface1.animation_window_x, interface1.animation_window_y, interface1.animation_window_width, interface1.animation_window_height);
    }
  }
  
  public void show(int layer, int index){
    
    if (states_final[interface1.playhead_position] != null){
      if (states_final[interface1.playhead_position].layer == layer){
        if (type == "Background"){
          fill(states_final[interface1.playhead_position].fill_color[0], states_final[interface1.playhead_position].fill_color[1], states_final[interface1.playhead_position].fill_color[2]);
          rect(0, 0, 1920, 1080);
        }
        else if (type == "Image"){
          pushMatrix();
          translate(states_final[interface1.playhead_position].x, states_final[interface1.playhead_position].y);
          rotate(radians(states_final[interface1.playhead_position].rotation));
          tint(255, (float) 255 * states_final[interface1.playhead_position].visibility);
          image(sprites.get(index).image, 0, 0, states_final[interface1.playhead_position].image_width, states_final[interface1.playhead_position].image_height);
          tint(255, 255);
          //rotate(-radians(states_final[interface1.playhead_position].rotation));
          //translate(-(interface1.animation_window_x + (float) (interface1.animation_window_width) * ((float) states_final[interface1.playhead_position].x / 1920f)), -(interface1.animation_window_y + (float) (interface1.animation_window_height) * ((float) states_final[interface1.playhead_position].y / 1080f)));
          popMatrix();
        }
      }
    }
    else if (type == "Background" && layer == 9){
      fill(255);
      noStroke();
      rect(0, 0, 1920, 1080);
    }
  }
}
class State {
  int x;
  int y;
  
  float rotation;
  
  String[] interval_types;
  
  int image_width;
  int image_height;
  
  float visibility;
  
  int layer;
  
  int frame;
  
  boolean fill;
  boolean stroke;
  
  int[] fill_color;
  int[] stroke_color;
  
  int stroke_weight;
  
  State (int frame, int x, int y, float rotation, int image_width, int image_height, String[] interval_types, int layer, float visibility){
    this.frame = frame;
    this.x = x;
    this.y = y;
    this.rotation = rotation;
    this.interval_types = interval_types;
    this.layer = layer;
    this.visibility = visibility;
    this.image_width = image_width;
    this.image_height = image_height;
  }
  
  State (int frame, String[] interval_types, int[] fill_color, int layer){
    this.frame = frame;
    this.interval_types = interval_types;
    this.fill_color = fill_color;
    this.layer = layer;
  }
  
  State (int frame, int x, int y, float rotation, int image_width, int image_height, String[] interval_types, int layer, float visibility, int[] fill_color, int[] stroke_color, int stroke_weight, boolean fill, boolean stroke){
    this.frame = frame;
    this.x = x;
    this.y = y;
    this.rotation = rotation;
    this.interval_types = interval_types;
    this.layer = layer;
    this.visibility = visibility;
    this.image_width = image_width;
    this.image_height = image_height;
    this.fill_color = fill_color;
    this.stroke_color = stroke_color;
    this.stroke_weight = stroke_weight;
    this.fill = fill;
    this.stroke = stroke;
  }
}
public void updateCurrentState(){
  
  if (interface1.sprite_selected == true){
    int state_index = 0;
    
    for (state_index = 0; state_index < sprites.get(interface1.sprite_selected_index).states.size(); state_index++){
      if (sprites.get(interface1.sprite_selected_index).states.get(state_index).frame > interface1.playhead_position){
        state_index--;
        break;
      }
    }
    
    //state_index--;
    
    State last_state;
    
    if (sprites.get(interface1.sprite_selected_index).type == "Image"){
      
      //try {
      //  last_state = sprites.get(interface1.sprite_selected_index).states.get(state_index);
      //} catch (Exception e){
      //  last_state = sprites.get(interface1.sprite_selected_index).states.get(sprites.get(interface1.sprite_selected_index).states.size() - 1);
      //  //last_state = new State(0, 0, 0, 0, 0, 0, new String[]{"linear", "linear", "linear", "linear", "linear", "linear", "integer"}, 1, 1);
      //}
      
      last_state = new State(0, 0, 0, 0, 0, 0, new String[]{"linear", "linear", "linear", "linear", "linear", "linear", "integer"}, 1, 1);
      
      int last_x = 0;
      int last_y = 0;
      int last_width = 0;
      int last_height = 0;
      float last_rotation = 0;
      int last_layer = 0;
      float last_visibility = 0;
      String[] last_interval_types;
      
      last_x = last_x;
      last_y = last_state.y;
      last_width = last_state.image_width;
      last_height = last_state.image_height;
      last_rotation = last_state.rotation;
      last_layer = last_state.layer;
      last_visibility = last_state.visibility;
      last_interval_types = last_state.interval_types;
      
      //x
      for (State state : sprites.get(interface1.sprite_selected_index).states){
        if (state.frame > interface1.playhead_position){
          break;
        }
        else {
          if (state.x != -1){
            last_x = state.x;
          }
        }
      }
      
      
      
      //y
      for (State state : sprites.get(interface1.sprite_selected_index).states){
        if (state.frame > interface1.playhead_position){
          break;
        }
        else {
          if (state.y != -1){
            last_y = state.y;
          }
        }
      }
      
      //width
      for (State state : sprites.get(interface1.sprite_selected_index).states){
        if (state.frame > interface1.playhead_position){
          break;
        }
        else {
          if (state.image_width != -1){
            last_width = state.image_width;
          }
        }
      }
      
      //height
      for (State state : sprites.get(interface1.sprite_selected_index).states){
        if (state.frame > interface1.playhead_position){
          break;
        }
        else {
          if (state.image_height != -1){
            last_height = state.image_height;
          }
        }
      }
      
      //rotation
      for (State state : sprites.get(interface1.sprite_selected_index).states){
        if (state.frame > interface1.playhead_position){
          break;
        }
        else {
          if (state.rotation != -1){
            last_rotation = state.rotation;
          }
        }
      }
      
      //layer
      for (State state : sprites.get(interface1.sprite_selected_index).states){
        if (state.frame > interface1.playhead_position){
          break;
        }
        else {
          if (state.layer != -1){
            last_layer = state.layer;
          }
        }
      }
      
      //visibility
      for (State state : sprites.get(interface1.sprite_selected_index).states){
        if (state.frame > interface1.playhead_position){
          break;
        }
        else {
          if (state.visibility != -1){
            last_visibility = state.visibility;
          }
        }
      }
      
      //interval_types
      for (State state : sprites.get(interface1.sprite_selected_index).states){
        if (state.frame > interface1.playhead_position){
          break;
        }
        else {
          if (state.interval_types != new String[]{"linear", "linear", "linear", "linear", "linear", "linear", "integer"}){
            last_interval_types = state.interval_types;
          }
        }
      }
      interface1.current_x = last_x;
      interface1.current_y = last_y;
      interface1.current_width = last_width;
      interface1.current_height = last_height;
      interface1.current_rotation = last_rotation;
      interface1.current_layer = last_layer;
      interface1.current_visibility = last_visibility;
      //interface1.current_interval_types = last_interval_types;
      interface1.current_interval_types = new String[]{"linear", "linear", "linear", "linear", "linear", "linear", "integer"};
      //interface1.current_fill_color = last_state.fill_color;
      
      floats = new String[7];
      
      for (int index = 0; index < floats.length; index++){
        floats[index] = "0.0";
      }
    
      if (sprites.get(interface1.sprite_selected_index).type != interface1.previous_type){
        
        interface1.previous_type = sprites.get(interface1.sprite_selected_index).type;
      
        interface1.textbox_width = new int[7];
        
        interface1.textbox_width[0] = 25;
        interface1.textbox_width[1] = 25;
        interface1.textbox_width[2] = 25;
        interface1.textbox_width[3] = 25;
        interface1.textbox_width[4] = 25;
        interface1.textbox_width[5] = 25;
        interface1.textbox_width[6] = 25;
        
        interface1.textbox_offset = new int[7];
        
        interface1.textbox_offset[0] = 150;
        interface1.textbox_offset[1] = 150;
        interface1.textbox_offset[2] = 200;
        interface1.textbox_offset[3] = 210;
        interface1.textbox_offset[4] = 225;
        interface1.textbox_offset[5] = 230;
        interface1.textbox_offset[6] = 190;
        
        interface1.texts = new String[7];
        interface1.texts[0] = "Position x";
        interface1.texts[1] = "Position y";
        interface1.texts[2] = "Element width";
        interface1.texts[3] = "Element height";
        interface1.texts[4] = "Element rotation";
        interface1.texts[5] = "Element visibility";
        interface1.texts[6] = "Element layer";
      }
      
      if (sprites.get(interface1.sprite_selected_index).states.size() > 1) {
        interface1.latest_x = sprites.get(interface1.sprite_selected_index).states_final[interface1.playhead_position].x;
        interface1.latest_y = sprites.get(interface1.sprite_selected_index).states_final[interface1.playhead_position].y;
        interface1.latest_rotation = sprites.get(interface1.sprite_selected_index).states_final[interface1.playhead_position].rotation;
      }
      else {
        interface1.latest_x = interface1.current_x;
        interface1.latest_y = interface1.current_y;
        interface1.latest_rotation = interface1.current_rotation;
      }
    }
    else if (sprites.get(interface1.sprite_selected_index).type == "Background"){
        
      try {
        last_state = sprites.get(interface1.sprite_selected_index).states.get(state_index);
      } catch (Exception e){
        last_state = new State(0, new String[]{"linear"}, new int[]{255, 255, 255}, 9);
      }
      
      interface1.current_layer = last_state.layer;
      interface1.current_interval_types = last_state.interval_types;
      interface1.current_fill_color = last_state.fill_color;
    
      if (sprites.get(interface1.sprite_selected_index).type != interface1.previous_type){
        
        interface1.previous_type = sprites.get(interface1.sprite_selected_index).type;
      
        interface1.textbox_width = new int[3];
        
        interface1.textbox_width[0] = 25;
        interface1.textbox_width[1] = 25;
        interface1.textbox_width[2] = 25;
        
        interface1.textbox_offset = new int[1]; 
        interface1.textbox_offset[0] = 95;
        
        interface1.texts = new String[1];
        interface1.texts[0] = "Color";
        
        interface1.current_fill_color = new int[3];
        interface1.current_fill_color[0] = 255;
        interface1.current_fill_color[1] = 255;
        interface1.current_fill_color[2] = 255;
      }
    }
    
    //for (Sprite sprite : sprites){
    //  sprite.update();
    //}
  }
  
  interface1.last_frame = 0;
  
  for (Sprite sprite : sprites){
    for (State state: sprite.states){
      if (state.frame > interface1.last_frame){
        interface1.last_frame = state.frame;
      }
    }
  }
}
public void updateTextboxWidths(){
  if (sprites.get(interface1.sprite_selected_index).type == "Image"){
    interface1.textbox_width[0] = PApplet.parseInt(textWidth(str(interface1.current_x))) + 2 * interface1.textbox_width_offset;
    interface1.textbox_width[1] = PApplet.parseInt(textWidth(str(interface1.current_y))) + 2 * interface1.textbox_width_offset;
    interface1.textbox_width[2] = PApplet.parseInt(textWidth(str(interface1.current_width))) + 2 * interface1.textbox_width_offset;
    interface1.textbox_width[3] = PApplet.parseInt(textWidth(str(interface1.current_height))) + 2 * interface1.textbox_width_offset;
    
    if (sprite_settings_typing == true && sprite_settings_index == 4){
      interface1.textbox_width[4] = PApplet.parseInt(textWidth(floats[sprite_settings_index])) + 2 * interface1.textbox_width_offset;
    }
    else {
      interface1.textbox_width[4] = PApplet.parseInt(textWidth(str(interface1.current_rotation))) + 2 * interface1.textbox_width_offset;
    }
    
    if (sprite_settings_typing == true && sprite_settings_index == 5){
      interface1.textbox_width[5] = PApplet.parseInt(textWidth(floats[sprite_settings_index])) + 2 * interface1.textbox_width_offset;
    }
    else {
      interface1.textbox_width[5] = PApplet.parseInt(textWidth(str(interface1.current_visibility))) + 2 * interface1.textbox_width_offset;
    }
    interface1.textbox_width[6] = PApplet.parseInt(textWidth(str(interface1.current_layer))) + 2 * interface1.textbox_width_offset;
  }
  else if (sprites.get(interface1.sprite_selected_index).type == "Background"){
    interface1.textbox_width[0] = PApplet.parseInt(textWidth(str(interface1.current_fill_color[0]))) + 2 * interface1.textbox_width_offset;
    interface1.textbox_width[1] = PApplet.parseInt(textWidth(str(interface1.current_fill_color[1]))) + 2 * interface1.textbox_width_offset;
    interface1.textbox_width[2] = PApplet.parseInt(textWidth(str(interface1.current_fill_color[2]))) + 2 * interface1.textbox_width_offset;
  }
}
public Boolean isMouseOn(int p1, int p2, int p3, int p4, String mode){
  p1 = (int) (p1 * scalex);
  p2 = (int) (p2 * scaley);
  p3 = (int) (p3 * scalex);
  p4 = (int) (p4 * scaley);
  
  Boolean return_val = false;
  if (mode == "CORNERS"){
    if (mouseX > p1 && mouseX < p3 && mouseY > p2 && mouseY < p4){
      return_val = true;
    }
  }
  else if (mode == "CORNER"){
    if (mouseX > p1 && mouseX < p1 + p3 && mouseY > p2 && mouseY < p2 + p4){
      return_val = true;
    }
  }
  return return_val;
}
public void exportVideo(){
  videoExport.setQuality(interface1.video_quality, 128);
  videoExport.setFrameRate(interface1.framerate); 
  //noLoop();
  videoExport.startMovie();
}
public String switchInterval(String current_interval){
  ArrayList<String> intervals = new ArrayList<String>();
  intervals.add("linear");
  intervals.add("ease_in");
  intervals.add("ease_out");
  intervals.add("integer");
  
  int current_interval_num = intervals.indexOf(current_interval);
  
  current_interval_num++;
  
  String final_string = intervals.get(current_interval_num % intervals.size());
  
  return final_string;
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Editor" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
